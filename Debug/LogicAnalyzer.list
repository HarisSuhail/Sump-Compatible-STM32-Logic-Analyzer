
LogicAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002efc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003060  08003060  00013060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003068  08003068  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003148  2000000c  0800307c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003154  0800307c  00023154  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f72  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000228e  00000000  00000000  00030fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00033238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  00033da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b9f  00000000  00000000  00034820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9ba  00000000  00000000  0004a3bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007220c  00000000  00000000  00055d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7f85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f3c  00000000  00000000  000c8000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08002ff4 	.word	0x08002ff4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08002ff4 	.word	0x08002ff4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_uldivmod>:
 8000160:	b953      	cbnz	r3, 8000178 <__aeabi_uldivmod+0x18>
 8000162:	b94a      	cbnz	r2, 8000178 <__aeabi_uldivmod+0x18>
 8000164:	2900      	cmp	r1, #0
 8000166:	bf08      	it	eq
 8000168:	2800      	cmpeq	r0, #0
 800016a:	bf1c      	itt	ne
 800016c:	f04f 31ff 	movne.w	r1, #4294967295
 8000170:	f04f 30ff 	movne.w	r0, #4294967295
 8000174:	f000 b974 	b.w	8000460 <__aeabi_idiv0>
 8000178:	f1ad 0c08 	sub.w	ip, sp, #8
 800017c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000180:	f000 f806 	bl	8000190 <__udivmoddi4>
 8000184:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800018c:	b004      	add	sp, #16
 800018e:	4770      	bx	lr

08000190 <__udivmoddi4>:
 8000190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000194:	468c      	mov	ip, r1
 8000196:	4604      	mov	r4, r0
 8000198:	9e08      	ldr	r6, [sp, #32]
 800019a:	2b00      	cmp	r3, #0
 800019c:	d14b      	bne.n	8000236 <__udivmoddi4+0xa6>
 800019e:	428a      	cmp	r2, r1
 80001a0:	4615      	mov	r5, r2
 80001a2:	d967      	bls.n	8000274 <__udivmoddi4+0xe4>
 80001a4:	fab2 f282 	clz	r2, r2
 80001a8:	b14a      	cbz	r2, 80001be <__udivmoddi4+0x2e>
 80001aa:	f1c2 0720 	rsb	r7, r2, #32
 80001ae:	fa01 f302 	lsl.w	r3, r1, r2
 80001b2:	fa20 f707 	lsr.w	r7, r0, r7
 80001b6:	4095      	lsls	r5, r2
 80001b8:	ea47 0c03 	orr.w	ip, r7, r3
 80001bc:	4094      	lsls	r4, r2
 80001be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001c2:	fbbc f7fe 	udiv	r7, ip, lr
 80001c6:	fa1f f885 	uxth.w	r8, r5
 80001ca:	fb0e c317 	mls	r3, lr, r7, ip
 80001ce:	fb07 f908 	mul.w	r9, r7, r8
 80001d2:	0c21      	lsrs	r1, r4, #16
 80001d4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001d8:	4599      	cmp	r9, r3
 80001da:	d909      	bls.n	80001f0 <__udivmoddi4+0x60>
 80001dc:	18eb      	adds	r3, r5, r3
 80001de:	f107 31ff 	add.w	r1, r7, #4294967295
 80001e2:	f080 811c 	bcs.w	800041e <__udivmoddi4+0x28e>
 80001e6:	4599      	cmp	r9, r3
 80001e8:	f240 8119 	bls.w	800041e <__udivmoddi4+0x28e>
 80001ec:	3f02      	subs	r7, #2
 80001ee:	442b      	add	r3, r5
 80001f0:	eba3 0309 	sub.w	r3, r3, r9
 80001f4:	fbb3 f0fe 	udiv	r0, r3, lr
 80001f8:	fb0e 3310 	mls	r3, lr, r0, r3
 80001fc:	fb00 f108 	mul.w	r1, r0, r8
 8000200:	b2a4      	uxth	r4, r4
 8000202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000206:	42a1      	cmp	r1, r4
 8000208:	d909      	bls.n	800021e <__udivmoddi4+0x8e>
 800020a:	192c      	adds	r4, r5, r4
 800020c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000210:	f080 8107 	bcs.w	8000422 <__udivmoddi4+0x292>
 8000214:	42a1      	cmp	r1, r4
 8000216:	f240 8104 	bls.w	8000422 <__udivmoddi4+0x292>
 800021a:	3802      	subs	r0, #2
 800021c:	442c      	add	r4, r5
 800021e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000222:	2700      	movs	r7, #0
 8000224:	1a64      	subs	r4, r4, r1
 8000226:	b11e      	cbz	r6, 8000230 <__udivmoddi4+0xa0>
 8000228:	2300      	movs	r3, #0
 800022a:	40d4      	lsrs	r4, r2
 800022c:	e9c6 4300 	strd	r4, r3, [r6]
 8000230:	4639      	mov	r1, r7
 8000232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000236:	428b      	cmp	r3, r1
 8000238:	d909      	bls.n	800024e <__udivmoddi4+0xbe>
 800023a:	2e00      	cmp	r6, #0
 800023c:	f000 80ec 	beq.w	8000418 <__udivmoddi4+0x288>
 8000240:	2700      	movs	r7, #0
 8000242:	e9c6 0100 	strd	r0, r1, [r6]
 8000246:	4638      	mov	r0, r7
 8000248:	4639      	mov	r1, r7
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	fab3 f783 	clz	r7, r3
 8000252:	2f00      	cmp	r7, #0
 8000254:	d148      	bne.n	80002e8 <__udivmoddi4+0x158>
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__udivmoddi4+0xd0>
 800025a:	4282      	cmp	r2, r0
 800025c:	f200 80fb 	bhi.w	8000456 <__udivmoddi4+0x2c6>
 8000260:	1a84      	subs	r4, r0, r2
 8000262:	eb61 0303 	sbc.w	r3, r1, r3
 8000266:	2001      	movs	r0, #1
 8000268:	469c      	mov	ip, r3
 800026a:	2e00      	cmp	r6, #0
 800026c:	d0e0      	beq.n	8000230 <__udivmoddi4+0xa0>
 800026e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000272:	e7dd      	b.n	8000230 <__udivmoddi4+0xa0>
 8000274:	b902      	cbnz	r2, 8000278 <__udivmoddi4+0xe8>
 8000276:	deff      	udf	#255	; 0xff
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	2a00      	cmp	r2, #0
 800027e:	f040 808f 	bne.w	80003a0 <__udivmoddi4+0x210>
 8000282:	2701      	movs	r7, #1
 8000284:	1b49      	subs	r1, r1, r5
 8000286:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800028a:	fa1f f985 	uxth.w	r9, r5
 800028e:	fbb1 fef8 	udiv	lr, r1, r8
 8000292:	fb08 111e 	mls	r1, r8, lr, r1
 8000296:	fb09 f00e 	mul.w	r0, r9, lr
 800029a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800029e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d907      	bls.n	80002b6 <__udivmoddi4+0x126>
 80002a6:	18eb      	adds	r3, r5, r3
 80002a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80002ac:	d202      	bcs.n	80002b4 <__udivmoddi4+0x124>
 80002ae:	4298      	cmp	r0, r3
 80002b0:	f200 80cd 	bhi.w	800044e <__udivmoddi4+0x2be>
 80002b4:	468e      	mov	lr, r1
 80002b6:	1a1b      	subs	r3, r3, r0
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	fb09 f900 	mul.w	r9, r9, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	45a1      	cmp	r9, r4
 80002cc:	d907      	bls.n	80002de <__udivmoddi4+0x14e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	d202      	bcs.n	80002dc <__udivmoddi4+0x14c>
 80002d6:	45a1      	cmp	r9, r4
 80002d8:	f200 80b6 	bhi.w	8000448 <__udivmoddi4+0x2b8>
 80002dc:	4618      	mov	r0, r3
 80002de:	eba4 0409 	sub.w	r4, r4, r9
 80002e2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002e6:	e79e      	b.n	8000226 <__udivmoddi4+0x96>
 80002e8:	f1c7 0520 	rsb	r5, r7, #32
 80002ec:	40bb      	lsls	r3, r7
 80002ee:	fa22 fc05 	lsr.w	ip, r2, r5
 80002f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80002f6:	fa21 f405 	lsr.w	r4, r1, r5
 80002fa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002fe:	fbb4 f9fe 	udiv	r9, r4, lr
 8000302:	fa1f f88c 	uxth.w	r8, ip
 8000306:	fb0e 4419 	mls	r4, lr, r9, r4
 800030a:	fa20 f305 	lsr.w	r3, r0, r5
 800030e:	40b9      	lsls	r1, r7
 8000310:	fb09 fa08 	mul.w	sl, r9, r8
 8000314:	4319      	orrs	r1, r3
 8000316:	0c0b      	lsrs	r3, r1, #16
 8000318:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800031c:	45a2      	cmp	sl, r4
 800031e:	fa02 f207 	lsl.w	r2, r2, r7
 8000322:	fa00 f307 	lsl.w	r3, r0, r7
 8000326:	d90b      	bls.n	8000340 <__udivmoddi4+0x1b0>
 8000328:	eb1c 0404 	adds.w	r4, ip, r4
 800032c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000330:	f080 8088 	bcs.w	8000444 <__udivmoddi4+0x2b4>
 8000334:	45a2      	cmp	sl, r4
 8000336:	f240 8085 	bls.w	8000444 <__udivmoddi4+0x2b4>
 800033a:	f1a9 0902 	sub.w	r9, r9, #2
 800033e:	4464      	add	r4, ip
 8000340:	eba4 040a 	sub.w	r4, r4, sl
 8000344:	fbb4 f0fe 	udiv	r0, r4, lr
 8000348:	fb0e 4410 	mls	r4, lr, r0, r4
 800034c:	fb00 fa08 	mul.w	sl, r0, r8
 8000350:	b289      	uxth	r1, r1
 8000352:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000356:	45a2      	cmp	sl, r4
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x1dc>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000362:	d26b      	bcs.n	800043c <__udivmoddi4+0x2ac>
 8000364:	45a2      	cmp	sl, r4
 8000366:	d969      	bls.n	800043c <__udivmoddi4+0x2ac>
 8000368:	3802      	subs	r0, #2
 800036a:	4464      	add	r4, ip
 800036c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000370:	fba0 8902 	umull	r8, r9, r0, r2
 8000374:	eba4 040a 	sub.w	r4, r4, sl
 8000378:	454c      	cmp	r4, r9
 800037a:	4641      	mov	r1, r8
 800037c:	46ce      	mov	lr, r9
 800037e:	d354      	bcc.n	800042a <__udivmoddi4+0x29a>
 8000380:	d051      	beq.n	8000426 <__udivmoddi4+0x296>
 8000382:	2e00      	cmp	r6, #0
 8000384:	d069      	beq.n	800045a <__udivmoddi4+0x2ca>
 8000386:	1a5a      	subs	r2, r3, r1
 8000388:	eb64 040e 	sbc.w	r4, r4, lr
 800038c:	fa04 f505 	lsl.w	r5, r4, r5
 8000390:	fa22 f307 	lsr.w	r3, r2, r7
 8000394:	40fc      	lsrs	r4, r7
 8000396:	431d      	orrs	r5, r3
 8000398:	e9c6 5400 	strd	r5, r4, [r6]
 800039c:	2700      	movs	r7, #0
 800039e:	e747      	b.n	8000230 <__udivmoddi4+0xa0>
 80003a0:	4095      	lsls	r5, r2
 80003a2:	f1c2 0320 	rsb	r3, r2, #32
 80003a6:	fa21 f003 	lsr.w	r0, r1, r3
 80003aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80003ae:	fbb0 f7f8 	udiv	r7, r0, r8
 80003b2:	fa1f f985 	uxth.w	r9, r5
 80003b6:	fb08 0017 	mls	r0, r8, r7, r0
 80003ba:	fa24 f303 	lsr.w	r3, r4, r3
 80003be:	4091      	lsls	r1, r2
 80003c0:	fb07 fc09 	mul.w	ip, r7, r9
 80003c4:	430b      	orrs	r3, r1
 80003c6:	0c19      	lsrs	r1, r3, #16
 80003c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003cc:	458c      	cmp	ip, r1
 80003ce:	fa04 f402 	lsl.w	r4, r4, r2
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x254>
 80003d4:	1869      	adds	r1, r5, r1
 80003d6:	f107 30ff 	add.w	r0, r7, #4294967295
 80003da:	d231      	bcs.n	8000440 <__udivmoddi4+0x2b0>
 80003dc:	458c      	cmp	ip, r1
 80003de:	d92f      	bls.n	8000440 <__udivmoddi4+0x2b0>
 80003e0:	3f02      	subs	r7, #2
 80003e2:	4429      	add	r1, r5
 80003e4:	eba1 010c 	sub.w	r1, r1, ip
 80003e8:	fbb1 f0f8 	udiv	r0, r1, r8
 80003ec:	fb08 1c10 	mls	ip, r8, r0, r1
 80003f0:	fb00 fe09 	mul.w	lr, r0, r9
 80003f4:	b299      	uxth	r1, r3
 80003f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x27e>
 80003fe:	1869      	adds	r1, r5, r1
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d218      	bcs.n	8000438 <__udivmoddi4+0x2a8>
 8000406:	458e      	cmp	lr, r1
 8000408:	d916      	bls.n	8000438 <__udivmoddi4+0x2a8>
 800040a:	3802      	subs	r0, #2
 800040c:	4429      	add	r1, r5
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000416:	e73a      	b.n	800028e <__udivmoddi4+0xfe>
 8000418:	4637      	mov	r7, r6
 800041a:	4630      	mov	r0, r6
 800041c:	e708      	b.n	8000230 <__udivmoddi4+0xa0>
 800041e:	460f      	mov	r7, r1
 8000420:	e6e6      	b.n	80001f0 <__udivmoddi4+0x60>
 8000422:	4618      	mov	r0, r3
 8000424:	e6fb      	b.n	800021e <__udivmoddi4+0x8e>
 8000426:	4543      	cmp	r3, r8
 8000428:	d2ab      	bcs.n	8000382 <__udivmoddi4+0x1f2>
 800042a:	ebb8 0102 	subs.w	r1, r8, r2
 800042e:	eb69 020c 	sbc.w	r2, r9, ip
 8000432:	3801      	subs	r0, #1
 8000434:	4696      	mov	lr, r2
 8000436:	e7a4      	b.n	8000382 <__udivmoddi4+0x1f2>
 8000438:	4618      	mov	r0, r3
 800043a:	e7e8      	b.n	800040e <__udivmoddi4+0x27e>
 800043c:	4608      	mov	r0, r1
 800043e:	e795      	b.n	800036c <__udivmoddi4+0x1dc>
 8000440:	4607      	mov	r7, r0
 8000442:	e7cf      	b.n	80003e4 <__udivmoddi4+0x254>
 8000444:	4681      	mov	r9, r0
 8000446:	e77b      	b.n	8000340 <__udivmoddi4+0x1b0>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	e747      	b.n	80002de <__udivmoddi4+0x14e>
 800044e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000452:	442b      	add	r3, r5
 8000454:	e72f      	b.n	80002b6 <__udivmoddi4+0x126>
 8000456:	4638      	mov	r0, r7
 8000458:	e707      	b.n	800026a <__udivmoddi4+0xda>
 800045a:	4637      	mov	r7, r6
 800045c:	e6e8      	b.n	8000230 <__udivmoddi4+0xa0>
 800045e:	bf00      	nop

08000460 <__aeabi_idiv0>:
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop

08000464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <HAL_Init+0x28>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a07      	ldr	r2, [pc, #28]	; (800048c <HAL_Init+0x28>)
 800046e:	f043 0310 	orr.w	r3, r3, #16
 8000472:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000474:	2003      	movs	r0, #3
 8000476:	f000 f91f 	bl	80006b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800047a:	2000      	movs	r0, #0
 800047c:	f000 f808 	bl	8000490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000480:	f002 fad6 	bl	8002a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	40022000 	.word	0x40022000

08000490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <HAL_InitTick+0x54>)
 800049a:	681a      	ldr	r2, [r3, #0]
 800049c:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <HAL_InitTick+0x58>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	4619      	mov	r1, r3
 80004a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80004aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 f937 	bl	8000722 <HAL_SYSTICK_Config>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ba:	2301      	movs	r3, #1
 80004bc:	e00e      	b.n	80004dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	2b0f      	cmp	r3, #15
 80004c2:	d80a      	bhi.n	80004da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004c4:	2200      	movs	r2, #0
 80004c6:	6879      	ldr	r1, [r7, #4]
 80004c8:	f04f 30ff 	mov.w	r0, #4294967295
 80004cc:	f000 f8ff 	bl	80006ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004d0:	4a06      	ldr	r2, [pc, #24]	; (80004ec <HAL_InitTick+0x5c>)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004d6:	2300      	movs	r3, #0
 80004d8:	e000      	b.n	80004dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004da:	2301      	movs	r3, #1
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20000008 	.word	0x20000008
 80004e8:	20000004 	.word	0x20000004
 80004ec:	20000000 	.word	0x20000000

080004f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_IncTick+0x1c>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	461a      	mov	r2, r3
 80004fa:	4b05      	ldr	r3, [pc, #20]	; (8000510 <HAL_IncTick+0x20>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4413      	add	r3, r2
 8000500:	4a03      	ldr	r2, [pc, #12]	; (8000510 <HAL_IncTick+0x20>)
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	20000004 	.word	0x20000004
 8000510:	2000002c 	.word	0x2000002c

08000514 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return uwTick;
 8000518:	4b02      	ldr	r3, [pc, #8]	; (8000524 <HAL_GetTick+0x10>)
 800051a:	681b      	ldr	r3, [r3, #0]
}
 800051c:	4618      	mov	r0, r3
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	2000002c 	.word	0x2000002c

08000528 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f003 0307 	and.w	r3, r3, #7
 8000536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4b0c      	ldr	r3, [pc, #48]	; (800056c <NVIC_SetPriorityGrouping+0x44>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000544:	4013      	ands	r3, r2
 8000546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800055a:	4a04      	ldr	r2, [pc, #16]	; (800056c <NVIC_SetPriorityGrouping+0x44>)
 800055c:	68bb      	ldr	r3, [r7, #8]
 800055e:	60d3      	str	r3, [r2, #12]
}
 8000560:	bf00      	nop
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000574:	4b04      	ldr	r3, [pc, #16]	; (8000588 <NVIC_GetPriorityGrouping+0x18>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	f003 0307 	and.w	r3, r3, #7
}
 800057e:	4618      	mov	r0, r3
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00

0800058c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	f003 021f 	and.w	r2, r3, #31
 800059c:	4906      	ldr	r1, [pc, #24]	; (80005b8 <NVIC_EnableIRQ+0x2c>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	095b      	lsrs	r3, r3, #5
 80005a4:	2001      	movs	r0, #1
 80005a6:	fa00 f202 	lsl.w	r2, r0, r2
 80005aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100

080005bc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	6039      	str	r1, [r7, #0]
 80005c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80005c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da0b      	bge.n	80005e8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	490c      	ldr	r1, [pc, #48]	; (8000608 <NVIC_SetPriority+0x4c>)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 030f 	and.w	r3, r3, #15
 80005dc:	3b04      	subs	r3, #4
 80005de:	0112      	lsls	r2, r2, #4
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	440b      	add	r3, r1
 80005e4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005e6:	e009      	b.n	80005fc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4907      	ldr	r1, [pc, #28]	; (800060c <NVIC_SetPriority+0x50>)
 80005ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f2:	0112      	lsls	r2, r2, #4
 80005f4:	b2d2      	uxtb	r2, r2
 80005f6:	440b      	add	r3, r1
 80005f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	e000ed00 	.word	0xe000ed00
 800060c:	e000e100 	.word	0xe000e100

08000610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000610:	b480      	push	{r7}
 8000612:	b089      	sub	sp, #36	; 0x24
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	f1c3 0307 	rsb	r3, r3, #7
 800062a:	2b04      	cmp	r3, #4
 800062c:	bf28      	it	cs
 800062e:	2304      	movcs	r3, #4
 8000630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	3304      	adds	r3, #4
 8000636:	2b06      	cmp	r3, #6
 8000638:	d902      	bls.n	8000640 <NVIC_EncodePriority+0x30>
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3b03      	subs	r3, #3
 800063e:	e000      	b.n	8000642 <NVIC_EncodePriority+0x32>
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000644:	f04f 32ff 	mov.w	r2, #4294967295
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	fa02 f303 	lsl.w	r3, r2, r3
 800064e:	43da      	mvns	r2, r3
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000658:	f04f 31ff 	mov.w	r1, #4294967295
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	43d9      	mvns	r1, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000668:	4313      	orrs	r3, r2
         );
}
 800066a:	4618      	mov	r0, r3
 800066c:	3724      	adds	r7, #36	; 0x24
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000684:	d301      	bcc.n	800068a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2301      	movs	r3, #1
 8000688:	e00f      	b.n	80006aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <SysTick_Config+0x40>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	3b01      	subs	r3, #1
 8000690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000692:	210f      	movs	r1, #15
 8000694:	f04f 30ff 	mov.w	r0, #4294967295
 8000698:	f7ff ff90 	bl	80005bc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <SysTick_Config+0x40>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <SysTick_Config+0x40>)
 80006a4:	2207      	movs	r2, #7
 80006a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	e000e010 	.word	0xe000e010

080006b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff ff31 	bl	8000528 <NVIC_SetPriorityGrouping>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
 80006da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e0:	f7ff ff46 	bl	8000570 <NVIC_GetPriorityGrouping>
 80006e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	68b9      	ldr	r1, [r7, #8]
 80006ea:	6978      	ldr	r0, [r7, #20]
 80006ec:	f7ff ff90 	bl	8000610 <NVIC_EncodePriority>
 80006f0:	4602      	mov	r2, r0
 80006f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006f6:	4611      	mov	r1, r2
 80006f8:	4618      	mov	r0, r3
 80006fa:	f7ff ff5f 	bl	80005bc <NVIC_SetPriority>
}
 80006fe:	bf00      	nop
 8000700:	3718      	adds	r7, #24
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}

08000706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b082      	sub	sp, #8
 800070a:	af00      	add	r7, sp, #0
 800070c:	4603      	mov	r3, r0
 800070e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff39 	bl	800058c <NVIC_EnableIRQ>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff ffa2 	bl	8000674 <SysTick_Config>
 8000730:	4603      	mov	r3, r0
}
 8000732:	4618      	mov	r0, r3
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e043      	b.n	80007da <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <HAL_DMA_Init+0xa8>)
 800075a:	4413      	add	r3, r2
 800075c:	4a22      	ldr	r2, [pc, #136]	; (80007e8 <HAL_DMA_Init+0xac>)
 800075e:	fba2 2303 	umull	r2, r3, r2, r3
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	009a      	lsls	r2, r3, #2
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a1f      	ldr	r2, [pc, #124]	; (80007ec <HAL_DMA_Init+0xb0>)
 800076e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2202      	movs	r2, #2
 8000774:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000786:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800078a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80007ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2200      	movs	r2, #0
 80007c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2201      	movs	r2, #1
 80007cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3714      	adds	r7, #20
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	bffdfff8 	.word	0xbffdfff8
 80007e8:	cccccccd 	.word	0xcccccccd
 80007ec:	40020000 	.word	0x40020000

080007f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
 80007fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d101      	bne.n	8000810 <HAL_DMA_Start_IT+0x20>
 800080c:	2302      	movs	r3, #2
 800080e:	e04a      	b.n	80008a6 <HAL_DMA_Start_IT+0xb6>
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800081e:	2b01      	cmp	r3, #1
 8000820:	d13a      	bne.n	8000898 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	2202      	movs	r2, #2
 8000826:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f022 0201 	bic.w	r2, r2, #1
 800083e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f980 	bl	8000b4c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000850:	2b00      	cmp	r3, #0
 8000852:	d008      	beq.n	8000866 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 020e 	orr.w	r2, r2, #14
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	e00f      	b.n	8000886 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 0204 	bic.w	r2, r2, #4
 8000874:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f042 020a 	orr.w	r2, r2, #10
 8000884:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f042 0201 	orr.w	r2, r2, #1
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	e005      	b.n	80008a4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2200      	movs	r2, #0
 800089c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80008a0:	2302      	movs	r3, #2
 80008a2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	2204      	movs	r2, #4
 80008ce:	409a      	lsls	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4013      	ands	r3, r2
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d04f      	beq.n	8000978 <HAL_DMA_IRQHandler+0xc8>
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	f003 0304 	and.w	r3, r3, #4
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d04a      	beq.n	8000978 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f003 0320 	and.w	r3, r3, #32
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d107      	bne.n	8000900 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f022 0204 	bic.w	r2, r2, #4
 80008fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a66      	ldr	r2, [pc, #408]	; (8000aa0 <HAL_DMA_IRQHandler+0x1f0>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d029      	beq.n	800095e <HAL_DMA_IRQHandler+0xae>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a65      	ldr	r2, [pc, #404]	; (8000aa4 <HAL_DMA_IRQHandler+0x1f4>)
 8000910:	4293      	cmp	r3, r2
 8000912:	d022      	beq.n	800095a <HAL_DMA_IRQHandler+0xaa>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a63      	ldr	r2, [pc, #396]	; (8000aa8 <HAL_DMA_IRQHandler+0x1f8>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d01a      	beq.n	8000954 <HAL_DMA_IRQHandler+0xa4>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a62      	ldr	r2, [pc, #392]	; (8000aac <HAL_DMA_IRQHandler+0x1fc>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d012      	beq.n	800094e <HAL_DMA_IRQHandler+0x9e>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a60      	ldr	r2, [pc, #384]	; (8000ab0 <HAL_DMA_IRQHandler+0x200>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d00a      	beq.n	8000948 <HAL_DMA_IRQHandler+0x98>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a5f      	ldr	r2, [pc, #380]	; (8000ab4 <HAL_DMA_IRQHandler+0x204>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d102      	bne.n	8000942 <HAL_DMA_IRQHandler+0x92>
 800093c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000940:	e00e      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 8000942:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000946:	e00b      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 8000948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800094c:	e008      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 800094e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000952:	e005      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	e002      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 800095a:	2340      	movs	r3, #64	; 0x40
 800095c:	e000      	b.n	8000960 <HAL_DMA_IRQHandler+0xb0>
 800095e:	2304      	movs	r3, #4
 8000960:	4a55      	ldr	r2, [pc, #340]	; (8000ab8 <HAL_DMA_IRQHandler+0x208>)
 8000962:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000968:	2b00      	cmp	r3, #0
 800096a:	f000 8094 	beq.w	8000a96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000976:	e08e      	b.n	8000a96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	2202      	movs	r2, #2
 800097e:	409a      	lsls	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d056      	beq.n	8000a36 <HAL_DMA_IRQHandler+0x186>
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	2b00      	cmp	r3, #0
 8000990:	d051      	beq.n	8000a36 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10b      	bne.n	80009b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	681a      	ldr	r2, [r3, #0]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f022 020a 	bic.w	r2, r2, #10
 80009ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2201      	movs	r2, #1
 80009b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a38      	ldr	r2, [pc, #224]	; (8000aa0 <HAL_DMA_IRQHandler+0x1f0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d029      	beq.n	8000a16 <HAL_DMA_IRQHandler+0x166>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a37      	ldr	r2, [pc, #220]	; (8000aa4 <HAL_DMA_IRQHandler+0x1f4>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d022      	beq.n	8000a12 <HAL_DMA_IRQHandler+0x162>
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <HAL_DMA_IRQHandler+0x1f8>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d01a      	beq.n	8000a0c <HAL_DMA_IRQHandler+0x15c>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a34      	ldr	r2, [pc, #208]	; (8000aac <HAL_DMA_IRQHandler+0x1fc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d012      	beq.n	8000a06 <HAL_DMA_IRQHandler+0x156>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <HAL_DMA_IRQHandler+0x200>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d00a      	beq.n	8000a00 <HAL_DMA_IRQHandler+0x150>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <HAL_DMA_IRQHandler+0x204>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d102      	bne.n	80009fa <HAL_DMA_IRQHandler+0x14a>
 80009f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80009f8:	e00e      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 80009fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009fe:	e00b      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 8000a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a04:	e008      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 8000a06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0a:	e005      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 8000a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a10:	e002      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 8000a12:	2320      	movs	r3, #32
 8000a14:	e000      	b.n	8000a18 <HAL_DMA_IRQHandler+0x168>
 8000a16:	2302      	movs	r3, #2
 8000a18:	4a27      	ldr	r2, [pc, #156]	; (8000ab8 <HAL_DMA_IRQHandler+0x208>)
 8000a1a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d034      	beq.n	8000a96 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000a34:	e02f      	b.n	8000a96 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	2208      	movs	r2, #8
 8000a3c:	409a      	lsls	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d028      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x1e8>
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	f003 0308 	and.w	r3, r3, #8
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d023      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 020e 	bic.w	r2, r2, #14
 8000a5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a68:	2101      	movs	r1, #1
 8000a6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2201      	movs	r2, #1
 8000a74:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d004      	beq.n	8000a98 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	4798      	blx	r3
    }
  }
  return;
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
}
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40020008 	.word	0x40020008
 8000aa4:	4002001c 	.word	0x4002001c
 8000aa8:	40020030 	.word	0x40020030
 8000aac:	40020044 	.word	0x40020044
 8000ab0:	40020058 	.word	0x40020058
 8000ab4:	4002006c 	.word	0x4002006c
 8000ab8:	40020000 	.word	0x40020000

08000abc <HAL_DMA_RegisterCallback>:
  * @param pCallback: pointer to private callbacsk function which has pointer to 
  *                   a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8000abc:	b480      	push	{r7}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	460b      	mov	r3, r1
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d101      	bne.n	8000adc <HAL_DMA_RegisterCallback+0x20>
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e032      	b.n	8000b42 <HAL_DMA_RegisterCallback+0x86>
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d122      	bne.n	8000b34 <HAL_DMA_RegisterCallback+0x78>
  {
    switch (CallbackID)
 8000aee:	7afb      	ldrb	r3, [r7, #11]
 8000af0:	2b03      	cmp	r3, #3
 8000af2:	d81b      	bhi.n	8000b2c <HAL_DMA_RegisterCallback+0x70>
 8000af4:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <HAL_DMA_RegisterCallback+0x40>)
 8000af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afa:	bf00      	nop
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b25 	.word	0x08000b25
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8000b12:	e011      	b.n	8000b38 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
      break;         
 8000b1a:	e00d      	b.n	8000b38 <HAL_DMA_RegisterCallback+0x7c>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	631a      	str	r2, [r3, #48]	; 0x30
      break;         
 8000b22:	e009      	b.n	8000b38 <HAL_DMA_RegisterCallback+0x7c>
      
    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	635a      	str	r2, [r3, #52]	; 0x34
      break; 
 8000b2a:	e005      	b.n	8000b38 <HAL_DMA_RegisterCallback+0x7c>
      
    default:
      status = HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	75fb      	strb	r3, [r7, #23]
      break;                                                            
 8000b30:	bf00      	nop
 8000b32:	e001      	b.n	8000b38 <HAL_DMA_RegisterCallback+0x7c>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	75fb      	strb	r3, [r7, #23]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status;
 8000b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f202 	lsl.w	r2, r1, r2
 8000b68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	d108      	bne.n	8000b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000b8a:	e007      	b.n	8000b9c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	68ba      	ldr	r2, [r7, #8]
 8000b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	60da      	str	r2, [r3, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
	...

08000ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b08b      	sub	sp, #44	; 0x2c
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bca:	e127      	b.n	8000e1c <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 8116 	bne.w	8000e16 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	2b12      	cmp	r3, #18
 8000bf0:	d034      	beq.n	8000c5c <HAL_GPIO_Init+0xb4>
 8000bf2:	2b12      	cmp	r3, #18
 8000bf4:	d80d      	bhi.n	8000c12 <HAL_GPIO_Init+0x6a>
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d02b      	beq.n	8000c52 <HAL_GPIO_Init+0xaa>
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d804      	bhi.n	8000c08 <HAL_GPIO_Init+0x60>
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d031      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d01c      	beq.n	8000c40 <HAL_GPIO_Init+0x98>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c06:	e048      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	d043      	beq.n	8000c94 <HAL_GPIO_Init+0xec>
 8000c0c:	2b11      	cmp	r3, #17
 8000c0e:	d01b      	beq.n	8000c48 <HAL_GPIO_Init+0xa0>
          break;
 8000c10:	e043      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c12:	4a87      	ldr	r2, [pc, #540]	; (8000e30 <HAL_GPIO_Init+0x288>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d026      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
 8000c18:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <HAL_GPIO_Init+0x288>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d806      	bhi.n	8000c2c <HAL_GPIO_Init+0x84>
 8000c1e:	4a85      	ldr	r2, [pc, #532]	; (8000e34 <HAL_GPIO_Init+0x28c>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d020      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
 8000c24:	4a84      	ldr	r2, [pc, #528]	; (8000e38 <HAL_GPIO_Init+0x290>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d01d      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
          break;
 8000c2a:	e036      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8000c2c:	4a83      	ldr	r2, [pc, #524]	; (8000e3c <HAL_GPIO_Init+0x294>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d019      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
 8000c32:	4a83      	ldr	r2, [pc, #524]	; (8000e40 <HAL_GPIO_Init+0x298>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d016      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
 8000c38:	4a82      	ldr	r2, [pc, #520]	; (8000e44 <HAL_GPIO_Init+0x29c>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d013      	beq.n	8000c66 <HAL_GPIO_Init+0xbe>
          break;
 8000c3e:	e02c      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e028      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	3304      	adds	r3, #4
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e023      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	3308      	adds	r3, #8
 8000c58:	623b      	str	r3, [r7, #32]
          break;
 8000c5a:	e01e      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	330c      	adds	r3, #12
 8000c62:	623b      	str	r3, [r7, #32]
          break;
 8000c64:	e019      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	623b      	str	r3, [r7, #32]
          break;
 8000c72:	e012      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d105      	bne.n	8000c88 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	611a      	str	r2, [r3, #16]
          break;
 8000c86:	e008      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	69fa      	ldr	r2, [r7, #28]
 8000c90:	615a      	str	r2, [r3, #20]
          break;
 8000c92:	e002      	b.n	8000c9a <HAL_GPIO_Init+0xf2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
          break;
 8000c98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2bff      	cmp	r3, #255	; 0xff
 8000c9e:	d801      	bhi.n	8000ca4 <HAL_GPIO_Init+0xfc>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	e001      	b.n	8000ca8 <HAL_GPIO_Init+0x100>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3304      	adds	r3, #4
 8000ca8:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	2bff      	cmp	r3, #255	; 0xff
 8000cae:	d802      	bhi.n	8000cb6 <HAL_GPIO_Init+0x10e>
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x114>
 8000cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb8:	3b08      	subs	r3, #8
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	6a39      	ldr	r1, [r7, #32]
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 8096 	beq.w	8000e16 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cea:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a56      	ldr	r2, [pc, #344]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <HAL_GPIO_Init+0x2a0>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 8000d02:	4a52      	ldr	r2, [pc, #328]	; (8000e4c <HAL_GPIO_Init+0x2a4>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0e:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d12:	f003 0303 	and.w	r3, r3, #3
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	220f      	movs	r2, #15
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	4013      	ands	r3, r2
 8000d24:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a49      	ldr	r2, [pc, #292]	; (8000e50 <HAL_GPIO_Init+0x2a8>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0x1ae>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a48      	ldr	r2, [pc, #288]	; (8000e54 <HAL_GPIO_Init+0x2ac>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d00d      	beq.n	8000d52 <HAL_GPIO_Init+0x1aa>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a47      	ldr	r2, [pc, #284]	; (8000e58 <HAL_GPIO_Init+0x2b0>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x1a6>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a46      	ldr	r2, [pc, #280]	; (8000e5c <HAL_GPIO_Init+0x2b4>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d101      	bne.n	8000d4a <HAL_GPIO_Init+0x1a2>
 8000d46:	2303      	movs	r3, #3
 8000d48:	e006      	b.n	8000d58 <HAL_GPIO_Init+0x1b0>
 8000d4a:	2304      	movs	r3, #4
 8000d4c:	e004      	b.n	8000d58 <HAL_GPIO_Init+0x1b0>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	e002      	b.n	8000d58 <HAL_GPIO_Init+0x1b0>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e000      	b.n	8000d58 <HAL_GPIO_Init+0x1b0>
 8000d56:	2300      	movs	r3, #0
 8000d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d5a:	f002 0203 	and.w	r2, r2, #3
 8000d5e:	0092      	lsls	r2, r2, #2
 8000d60:	4093      	lsls	r3, r2
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 8000d68:	4938      	ldr	r1, [pc, #224]	; (8000e4c <HAL_GPIO_Init+0x2a4>)
 8000d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6c:	089b      	lsrs	r3, r3, #2
 8000d6e:	3302      	adds	r3, #2
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d006      	beq.n	8000d90 <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d82:	4b37      	ldr	r3, [pc, #220]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4936      	ldr	r1, [pc, #216]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	600b      	str	r3, [r1, #0]
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1f6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d90:	4b33      	ldr	r3, [pc, #204]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4931      	ldr	r1, [pc, #196]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d006      	beq.n	8000db8 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000daa:	4b2d      	ldr	r3, [pc, #180]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	492c      	ldr	r1, [pc, #176]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x21e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000db8:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	4927      	ldr	r1, [pc, #156]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	4922      	ldr	r1, [pc, #136]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	608b      	str	r3, [r1, #8]
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x246>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000de2:	689a      	ldr	r2, [r3, #8]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	491d      	ldr	r1, [pc, #116]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000dfc:	68da      	ldr	r2, [r3, #12]
 8000dfe:	4918      	ldr	r1, [pc, #96]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	60cb      	str	r3, [r1, #12]
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x26e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e08:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4913      	ldr	r1, [pc, #76]	; (8000e60 <HAL_GPIO_Init+0x2b8>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	3301      	adds	r3, #1
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	f67f aed4 	bls.w	8000bcc <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	372c      	adds	r7, #44	; 0x2c
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	10210000 	.word	0x10210000
 8000e34:	10110000 	.word	0x10110000
 8000e38:	10120000 	.word	0x10120000
 8000e3c:	10310000 	.word	0x10310000
 8000e40:	10320000 	.word	0x10320000
 8000e44:	10220000 	.word	0x10220000
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40010800 	.word	0x40010800
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40011000 	.word	0x40011000
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	40010400 	.word	0x40010400

08000e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	807b      	strh	r3, [r7, #2]
 8000e70:	4613      	mov	r3, r2
 8000e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e74:	787b      	ldrb	r3, [r7, #1]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d003      	beq.n	8000e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e80:	e003      	b.n	8000e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e82:	887b      	ldrh	r3, [r7, #2]
 8000e84:	041a      	lsls	r2, r3, #16
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	611a      	str	r2, [r3, #16]
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr

08000e94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	405a      	eors	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	60da      	str	r2, [r3, #12]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec4:	695a      	ldr	r2, [r3, #20]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ece:	4a05      	ldr	r2, [pc, #20]	; (8000ee4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f000 f806 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40010400 	.word	0x40010400

08000ee8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr

08000efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f04:	2300      	movs	r3, #0
 8000f06:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	f000 8087 	beq.w	8001024 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f16:	4b92      	ldr	r3, [pc, #584]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d00c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f22:	4b8f      	ldr	r3, [pc, #572]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d112      	bne.n	8000f54 <HAL_RCC_OscConfig+0x58>
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f3a:	d10b      	bne.n	8000f54 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3c:	4b88      	ldr	r3, [pc, #544]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d06c      	beq.n	8001022 <HAL_RCC_OscConfig+0x126>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d168      	bne.n	8001022 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e22d      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d106      	bne.n	8000f6c <HAL_RCC_OscConfig+0x70>
 8000f5e:	4b80      	ldr	r3, [pc, #512]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a7f      	ldr	r2, [pc, #508]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	e02e      	b.n	8000fca <HAL_RCC_OscConfig+0xce>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10c      	bne.n	8000f8e <HAL_RCC_OscConfig+0x92>
 8000f74:	4b7a      	ldr	r3, [pc, #488]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a79      	ldr	r2, [pc, #484]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b77      	ldr	r3, [pc, #476]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a76      	ldr	r2, [pc, #472]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]
 8000f8c:	e01d      	b.n	8000fca <HAL_RCC_OscConfig+0xce>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f96:	d10c      	bne.n	8000fb2 <HAL_RCC_OscConfig+0xb6>
 8000f98:	4b71      	ldr	r3, [pc, #452]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a70      	ldr	r2, [pc, #448]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000f9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b6e      	ldr	r3, [pc, #440]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a6d      	ldr	r2, [pc, #436]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e00b      	b.n	8000fca <HAL_RCC_OscConfig+0xce>
 8000fb2:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6a      	ldr	r2, [pc, #424]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b68      	ldr	r3, [pc, #416]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a67      	ldr	r2, [pc, #412]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d013      	beq.n	8000ffa <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fa9f 	bl	8000514 <HAL_GetTick>
 8000fd6:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fd8:	e008      	b.n	8000fec <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fda:	f7ff fa9b 	bl	8000514 <HAL_GetTick>
 8000fde:	4602      	mov	r2, r0
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b64      	cmp	r3, #100	; 0x64
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e1e1      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fec:	4b5c      	ldr	r3, [pc, #368]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f0      	beq.n	8000fda <HAL_RCC_OscConfig+0xde>
 8000ff8:	e014      	b.n	8001024 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffa:	f7ff fa8b 	bl	8000514 <HAL_GetTick>
 8000ffe:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001000:	e008      	b.n	8001014 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001002:	f7ff fa87 	bl	8000514 <HAL_GetTick>
 8001006:	4602      	mov	r2, r0
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	2b64      	cmp	r3, #100	; 0x64
 800100e:	d901      	bls.n	8001014 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001010:	2303      	movs	r3, #3
 8001012:	e1cd      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001014:	4b52      	ldr	r3, [pc, #328]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f0      	bne.n	8001002 <HAL_RCC_OscConfig+0x106>
 8001020:	e000      	b.n	8001024 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001022:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d063      	beq.n	80010f8 <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001030:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800103c:	4b48      	ldr	r3, [pc, #288]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 030c 	and.w	r3, r3, #12
 8001044:	2b08      	cmp	r3, #8
 8001046:	d11c      	bne.n	8001082 <HAL_RCC_OscConfig+0x186>
 8001048:	4b45      	ldr	r3, [pc, #276]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d116      	bne.n	8001082 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001054:	4b42      	ldr	r3, [pc, #264]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d005      	beq.n	800106c <HAL_RCC_OscConfig+0x170>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d001      	beq.n	800106c <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e1a1      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106c:	4b3c      	ldr	r3, [pc, #240]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	4939      	ldr	r1, [pc, #228]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 800107c:	4313      	orrs	r3, r2
 800107e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001080:	e03a      	b.n	80010f8 <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d020      	beq.n	80010cc <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800108a:	4b36      	ldr	r3, [pc, #216]	; (8001164 <HAL_RCC_OscConfig+0x268>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001090:	f7ff fa40 	bl	8000514 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001098:	f7ff fa3c 	bl	8000514 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e182      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010aa:	4b2d      	ldr	r3, [pc, #180]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x19c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4926      	ldr	r1, [pc, #152]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
 80010ca:	e015      	b.n	80010f8 <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_RCC_OscConfig+0x268>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fa1f 	bl	8000514 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010da:	f7ff fa1b 	bl	8000514 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e161      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	2b00      	cmp	r3, #0
 8001102:	d039      	beq.n	8001178 <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d019      	beq.n	8001140 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 800110e:	2201      	movs	r2, #1
 8001110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001112:	f7ff f9ff 	bl	8000514 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff f9fb 	bl	8000514 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b02      	cmp	r3, #2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e141      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_RCC_OscConfig+0x264>)
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f000 fae3 	bl	8001704 <RCC_Delay>
 800113e:	e01b      	b.n	8001178 <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001140:	4b09      	ldr	r3, [pc, #36]	; (8001168 <HAL_RCC_OscConfig+0x26c>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001146:	f7ff f9e5 	bl	8000514 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114c:	e00e      	b.n	800116c <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800114e:	f7ff f9e1 	bl	8000514 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d907      	bls.n	800116c <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e127      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
 8001160:	40021000 	.word	0x40021000
 8001164:	42420000 	.word	0x42420000
 8001168:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800116c:	4b92      	ldr	r3, [pc, #584]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800116e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ea      	bne.n	800114e <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80a6 	beq.w	80012d2 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800118a:	4b8b      	ldr	r3, [pc, #556]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d10d      	bne.n	80011b2 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b88      	ldr	r3, [pc, #544]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a87      	ldr	r2, [pc, #540]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b85      	ldr	r3, [pc, #532]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011ae:	2301      	movs	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b2:	4b82      	ldr	r3, [pc, #520]	; (80013bc <HAL_RCC_OscConfig+0x4c0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d118      	bne.n	80011f0 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011be:	4b7f      	ldr	r3, [pc, #508]	; (80013bc <HAL_RCC_OscConfig+0x4c0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7e      	ldr	r2, [pc, #504]	; (80013bc <HAL_RCC_OscConfig+0x4c0>)
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ca:	f7ff f9a3 	bl	8000514 <HAL_GetTick>
 80011ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d2:	f7ff f99f 	bl	8000514 <HAL_GetTick>
 80011d6:	4602      	mov	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b64      	cmp	r3, #100	; 0x64
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e0e5      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b75      	ldr	r3, [pc, #468]	; (80013bc <HAL_RCC_OscConfig+0x4c0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d106      	bne.n	8001206 <HAL_RCC_OscConfig+0x30a>
 80011f8:	4b6f      	ldr	r3, [pc, #444]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a6e      	ldr	r2, [pc, #440]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	6213      	str	r3, [r2, #32]
 8001204:	e02d      	b.n	8001262 <HAL_RCC_OscConfig+0x366>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d10c      	bne.n	8001228 <HAL_RCC_OscConfig+0x32c>
 800120e:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001210:	6a1b      	ldr	r3, [r3, #32]
 8001212:	4a69      	ldr	r2, [pc, #420]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	6213      	str	r3, [r2, #32]
 800121a:	4b67      	ldr	r3, [pc, #412]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4a66      	ldr	r2, [pc, #408]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001220:	f023 0304 	bic.w	r3, r3, #4
 8001224:	6213      	str	r3, [r2, #32]
 8001226:	e01c      	b.n	8001262 <HAL_RCC_OscConfig+0x366>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	2b05      	cmp	r3, #5
 800122e:	d10c      	bne.n	800124a <HAL_RCC_OscConfig+0x34e>
 8001230:	4b61      	ldr	r3, [pc, #388]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	4a60      	ldr	r2, [pc, #384]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001236:	f043 0304 	orr.w	r3, r3, #4
 800123a:	6213      	str	r3, [r2, #32]
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	4a5d      	ldr	r2, [pc, #372]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6213      	str	r3, [r2, #32]
 8001248:	e00b      	b.n	8001262 <HAL_RCC_OscConfig+0x366>
 800124a:	4b5b      	ldr	r3, [pc, #364]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a5a      	ldr	r2, [pc, #360]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001250:	f023 0301 	bic.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	4b58      	ldr	r3, [pc, #352]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a57      	ldr	r2, [pc, #348]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800125c:	f023 0304 	bic.w	r3, r3, #4
 8001260:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d015      	beq.n	8001296 <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff f953 	bl	8000514 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001270:	e00a      	b.n	8001288 <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001272:	f7ff f94f 	bl	8000514 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001280:	4293      	cmp	r3, r2
 8001282:	d901      	bls.n	8001288 <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e093      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001288:	4b4b      	ldr	r3, [pc, #300]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	f003 0302 	and.w	r3, r3, #2
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0ee      	beq.n	8001272 <HAL_RCC_OscConfig+0x376>
 8001294:	e014      	b.n	80012c0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff f93d 	bl	8000514 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129c:	e00a      	b.n	80012b4 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129e:	f7ff f939 	bl	8000514 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e07d      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b4:	4b40      	ldr	r3, [pc, #256]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ee      	bne.n	800129e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012c0:	7dfb      	ldrb	r3, [r7, #23]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	4a3b      	ldr	r2, [pc, #236]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80012cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d069      	beq.n	80013ae <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d061      	beq.n	80013aa <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d146      	bne.n	800137c <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b34      	ldr	r3, [pc, #208]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff f90e 	bl	8000514 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff f90a 	bl	8000514 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e050      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001322:	d108      	bne.n	8001336 <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	4921      	ldr	r1, [pc, #132]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a19      	ldr	r1, [r3, #32]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	430b      	orrs	r3, r1
 8001348:	491b      	ldr	r1, [pc, #108]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff f8de 	bl	8000514 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800135c:	f7ff f8da 	bl	8000514 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e020      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x460>
 800137a:	e018      	b.n	80013ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_RCC_OscConfig+0x4c4>)
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001382:	f7ff f8c7 	bl	8000514 <HAL_GetTick>
 8001386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800138a:	f7ff f8c3 	bl	8000514 <HAL_GetTick>
 800138e:	4602      	mov	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e009      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_RCC_OscConfig+0x4bc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1f0      	bne.n	800138a <HAL_RCC_OscConfig+0x48e>
 80013a8:	e001      	b.n	80013ae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40007000 	.word	0x40007000
 80013c0:	42420060 	.word	0x42420060

080013c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d910      	bls.n	8001402 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013e0:	4b7a      	ldr	r3, [pc, #488]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 0207 	bic.w	r2, r3, #7
 80013e8:	4978      	ldr	r1, [pc, #480]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013f0:	4b76      	ldr	r3, [pc, #472]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d001      	beq.n	8001402 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0e0      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d020      	beq.n	8001450 <HAL_RCC_ClockConfig+0x8c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_ClockConfig+0x62>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800141a:	4b6d      	ldr	r3, [pc, #436]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4a6c      	ldr	r2, [pc, #432]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001420:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001424:	6053      	str	r3, [r2, #4]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	2b00      	cmp	r3, #0
 8001430:	d005      	beq.n	800143e <HAL_RCC_ClockConfig+0x7a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001432:	4b67      	ldr	r3, [pc, #412]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a66      	ldr	r2, [pc, #408]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001438:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800143c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800143e:	4b64      	ldr	r3, [pc, #400]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	4961      	ldr	r1, [pc, #388]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d06a      	beq.n	8001532 <HAL_RCC_ClockConfig+0x16e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001464:	4b5a      	ldr	r3, [pc, #360]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d115      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0a7      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d107      	bne.n	800148c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800147c:	4b54      	ldr	r3, [pc, #336]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e09b      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	4b50      	ldr	r3, [pc, #320]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e093      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800149c:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 0203 	bic.w	r2, r3, #3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	4949      	ldr	r1, [pc, #292]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014ae:	f7ff f831 	bl	8000514 <HAL_GetTick>
 80014b2:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d112      	bne.n	80014e2 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014bc:	e00a      	b.n	80014d4 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014be:	f7ff f829 	bl	8000514 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e077      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014d4:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 030c 	and.w	r3, r3, #12
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d1ee      	bne.n	80014be <HAL_RCC_ClockConfig+0xfa>
 80014e0:	e027      	b.n	8001532 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d11d      	bne.n	8001526 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014ea:	e00a      	b.n	8001502 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014ec:	f7ff f812 	bl	8000514 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e060      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001502:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b08      	cmp	r3, #8
 800150c:	d1ee      	bne.n	80014ec <HAL_RCC_ClockConfig+0x128>
 800150e:	e010      	b.n	8001532 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff f800 	bl	8000514 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	; 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e04e      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001526:	4b2a      	ldr	r3, [pc, #168]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ee      	bne.n	8001510 <HAL_RCC_ClockConfig+0x14c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001532:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d210      	bcs.n	8001562 <HAL_RCC_ClockConfig+0x19e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001540:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 0207 	bic.w	r2, r3, #7
 8001548:	4920      	ldr	r1, [pc, #128]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001550:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_RCC_ClockConfig+0x208>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0307 	and.w	r3, r3, #7
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	429a      	cmp	r2, r3
 800155c:	d001      	beq.n	8001562 <HAL_RCC_ClockConfig+0x19e>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e030      	b.n	80015c4 <HAL_RCC_ClockConfig+0x200>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	2b00      	cmp	r3, #0
 800156c:	d008      	beq.n	8001580 <HAL_RCC_ClockConfig+0x1bc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	4915      	ldr	r1, [pc, #84]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d009      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x1dc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800158c:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 800159c:	4313      	orrs	r3, r2
 800159e:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015a0:	f000 f81c 	bl	80015dc <HAL_RCC_GetSysClockFreq>
 80015a4:	4601      	mov	r1, r0
 80015a6:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <HAL_RCC_ClockConfig+0x20c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f003 030f 	and.w	r3, r3, #15
 80015b0:	4a08      	ldr	r2, [pc, #32]	; (80015d4 <HAL_RCC_ClockConfig+0x210>)
 80015b2:	5cd3      	ldrb	r3, [r2, r3]
 80015b4:	fa21 f303 	lsr.w	r3, r1, r3
 80015b8:	4a07      	ldr	r2, [pc, #28]	; (80015d8 <HAL_RCC_ClockConfig+0x214>)
 80015ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015bc:	2000      	movs	r0, #0
 80015be:	f7fe ff67 	bl	8000490 <HAL_InitTick>
  
  return HAL_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40022000 	.word	0x40022000
 80015d0:	40021000 	.word	0x40021000
 80015d4:	08003048 	.word	0x08003048
 80015d8:	20000008 	.word	0x20000008

080015dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015dc:	b490      	push	{r4, r7}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015e2:	4b2a      	ldr	r3, [pc, #168]	; (800168c <HAL_RCC_GetSysClockFreq+0xb0>)
 80015e4:	1d3c      	adds	r4, r7, #4
 80015e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015ec:	4b28      	ldr	r3, [pc, #160]	; (8001690 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001606:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d002      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x40>
 8001616:	2b08      	cmp	r3, #8
 8001618:	d003      	beq.n	8001622 <HAL_RCC_GetSysClockFreq+0x46>
 800161a:	e02d      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800161c:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800161e:	623b      	str	r3, [r7, #32]
      break;
 8001620:	e02d      	b.n	800167e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800162e:	4413      	add	r3, r2
 8001630:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001634:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d013      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001640:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	0c5b      	lsrs	r3, r3, #17
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800164e:	4413      	add	r3, r2
 8001650:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001654:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	4a0f      	ldr	r2, [pc, #60]	; (8001698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800165a:	fb02 f203 	mul.w	r2, r2, r3
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	fbb2 f3f3 	udiv	r3, r2, r3
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
 8001666:	e004      	b.n	8001672 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4a0c      	ldr	r2, [pc, #48]	; (800169c <HAL_RCC_GetSysClockFreq+0xc0>)
 800166c:	fb02 f303 	mul.w	r3, r2, r3
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	623b      	str	r3, [r7, #32]
      break;
 8001676:	e002      	b.n	800167e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001678:	4b07      	ldr	r3, [pc, #28]	; (8001698 <HAL_RCC_GetSysClockFreq+0xbc>)
 800167a:	623b      	str	r3, [r7, #32]
      break;
 800167c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167e:	6a3b      	ldr	r3, [r7, #32]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bc90      	pop	{r4, r7}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	0800300c 	.word	0x0800300c
 8001690:	0800301c 	.word	0x0800301c
 8001694:	40021000 	.word	0x40021000
 8001698:	007a1200 	.word	0x007a1200
 800169c:	003d0900 	.word	0x003d0900

080016a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016b8:	f7ff fff2 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016bc:	4601      	mov	r1, r0
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ca:	5cd3      	ldrb	r3, [r2, r3]
 80016cc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80016d0:	4618      	mov	r0, r3
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	08003058 	.word	0x08003058

080016dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_RCC_GetHCLKFreq>
 80016e4:	4601      	mov	r1, r0
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	0adb      	lsrs	r3, r3, #11
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f2:	5cd3      	ldrb	r3, [r2, r3]
 80016f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80016f8:	4618      	mov	r0, r3
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	08003058 	.word	0x08003058

08001704 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800170c:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <RCC_Delay+0x34>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0a      	ldr	r2, [pc, #40]	; (800173c <RCC_Delay+0x38>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0a5b      	lsrs	r3, r3, #9
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001720:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1e5a      	subs	r2, r3, #1
 8001726:	60fa      	str	r2, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f9      	bne.n	8001720 <RCC_Delay+0x1c>
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	bc80      	pop	{r7}
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000008 	.word	0x20000008
 800173c:	10624dd3 	.word	0x10624dd3

08001740 <HAL_TIM_Base_Init>:
  *       Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e01d      	b.n	800178e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f001 f994 	bl	8002a94 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2202      	movs	r2, #2
 8001770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3304      	adds	r3, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4610      	mov	r0, r2
 8001780:	f000 fa5e 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2201      	movs	r2, #1
 8001788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f042 0201 	orr.w	r2, r2, #1
 80017ac:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0201 	orr.w	r2, r2, #1
 80017bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0201 	bic.w	r2, r2, #1
 80017e0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6a1a      	ldr	r2, [r3, #32]
 80017e8:	f241 1311 	movw	r3, #4369	; 0x1111
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10f      	bne.n	8001812 <HAL_TIM_Base_Stop_IT+0x48>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	f240 4344 	movw	r3, #1092	; 0x444
 80017fc:	4013      	ands	r3, r2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d107      	bne.n	8001812 <HAL_TIM_Base_Stop_IT+0x48>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f022 0201 	bic.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b02      	cmp	r3, #2
 8001832:	d122      	bne.n	800187a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b02      	cmp	r3, #2
 8001840:	d11b      	bne.n	800187a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f06f 0202 	mvn.w	r2, #2
 800184a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d003      	beq.n	8001868 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f9d1 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 8001866:	e005      	b.n	8001874 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f9c4 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f9d3 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b04      	cmp	r3, #4
 8001886:	d122      	bne.n	80018ce <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d11b      	bne.n	80018ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f06f 0204 	mvn.w	r2, #4
 800189e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2202      	movs	r2, #2
 80018a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_TIM_IRQHandler+0x9e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 f9a7 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 80018ba:	e005      	b.n	80018c8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f99a 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f9a9 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d122      	bne.n	8001922 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d11b      	bne.n	8001922 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f06f 0208 	mvn.w	r2, #8
 80018f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2204      	movs	r2, #4
 80018f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_TIM_IRQHandler+0xf2>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f97d 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 800190e:	e005      	b.n	800191c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f970 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 f97f 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	f003 0310 	and.w	r3, r3, #16
 800192c:	2b10      	cmp	r3, #16
 800192e:	d122      	bne.n	8001976 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	2b10      	cmp	r3, #16
 800193c:	d11b      	bne.n	8001976 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f06f 0210 	mvn.w	r2, #16
 8001946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2208      	movs	r2, #8
 800194c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001958:	2b00      	cmp	r3, #0
 800195a:	d003      	beq.n	8001964 <HAL_TIM_IRQHandler+0x146>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f953 	bl	8001c08 <HAL_TIM_IC_CaptureCallback>
 8001962:	e005      	b.n	8001970 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 f946 	bl	8001bf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 f955 	bl	8001c1a <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10e      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b01      	cmp	r3, #1
 8001990:	d107      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0201 	mvn.w	r2, #1
 800199a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f921 	bl	8001be4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	2b80      	cmp	r3, #128	; 0x80
 80019ae:	d10e      	bne.n	80019ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ba:	2b80      	cmp	r3, #128	; 0x80
 80019bc:	d107      	bne.n	80019ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 fa91 	bl	8001ef0 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d10e      	bne.n	80019fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019e6:	2b40      	cmp	r3, #64	; 0x40
 80019e8:	d107      	bne.n	80019fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f919 	bl	8001c2c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d10e      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d107      	bne.n	8001a26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f06f 0220 	mvn.w	r2, #32
 8001a1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fa5c 	bl	8001ede <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b084      	sub	sp, #16
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_ConfigClockSource+0x1c>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0c8      	b.n	8001bdc <HAL_TIM_ConfigClockSource+0x1ae>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2202      	movs	r2, #2
 8001a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b40      	cmp	r3, #64	; 0x40
 8001a80:	d077      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x144>
 8001a82:	2b40      	cmp	r3, #64	; 0x40
 8001a84:	d80e      	bhi.n	8001aa4 <HAL_TIM_ConfigClockSource+0x76>
 8001a86:	2b10      	cmp	r3, #16
 8001a88:	f000 808a 	beq.w	8001ba0 <HAL_TIM_ConfigClockSource+0x172>
 8001a8c:	2b10      	cmp	r3, #16
 8001a8e:	d802      	bhi.n	8001a96 <HAL_TIM_ConfigClockSource+0x68>
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d07e      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x164>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 8001a94:	e099      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001a96:	2b20      	cmp	r3, #32
 8001a98:	f000 8089 	beq.w	8001bae <HAL_TIM_ConfigClockSource+0x180>
 8001a9c:	2b30      	cmp	r3, #48	; 0x30
 8001a9e:	f000 808d 	beq.w	8001bbc <HAL_TIM_ConfigClockSource+0x18e>
    break;
 8001aa2:	e092      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001aa4:	2b70      	cmp	r3, #112	; 0x70
 8001aa6:	d016      	beq.n	8001ad6 <HAL_TIM_ConfigClockSource+0xa8>
 8001aa8:	2b70      	cmp	r3, #112	; 0x70
 8001aaa:	d804      	bhi.n	8001ab6 <HAL_TIM_ConfigClockSource+0x88>
 8001aac:	2b50      	cmp	r3, #80	; 0x50
 8001aae:	d040      	beq.n	8001b32 <HAL_TIM_ConfigClockSource+0x104>
 8001ab0:	2b60      	cmp	r3, #96	; 0x60
 8001ab2:	d04e      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0x124>
    break;
 8001ab4:	e089      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
  switch (sClockSourceConfig->ClockSource)
 8001ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_ConfigClockSource+0x96>
 8001abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ac0:	d024      	beq.n	8001b0c <HAL_TIM_ConfigClockSource+0xde>
    break;
 8001ac2:	e082      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0207 	bic.w	r2, r2, #7
 8001ad2:	609a      	str	r2, [r3, #8]
    break;
 8001ad4:	e079      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	f000 f995 	bl	8001e14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001af8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	609a      	str	r2, [r3, #8]
    break;
 8001b0a:	e05e      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ETR_SetConfig(htim->Instance,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	6899      	ldr	r1, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f000 f97a 	bl	8001e14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b2e:	609a      	str	r2, [r3, #8]
    break;
 8001b30:	e04b      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6859      	ldr	r1, [r3, #4]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	f000 f8e4 	bl	8001d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2150      	movs	r1, #80	; 0x50
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f943 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001b50:	e03b      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f000 f906 	bl	8001d70 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2160      	movs	r1, #96	; 0x60
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f933 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001b70:	e02b      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f000 f8c4 	bl	8001d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2140      	movs	r1, #64	; 0x40
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f923 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001b90:	e01b      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f91c 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001b9e:	e014      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2110      	movs	r1, #16
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f915 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001bac:	e00d      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2120      	movs	r1, #32
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 f90e 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001bba:	e006      	b.n	8001bca <HAL_TIM_ConfigClockSource+0x19c>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2130      	movs	r1, #48	; 0x30
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 f907 	bl	8001dd6 <TIM_ITRx_SetConfig>
    break;
 8001bc8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim : TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim : TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bc80      	pop	{r7}
 8001c18:	4770      	bx	lr

08001c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
	...

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx : TIM periheral
  * @param  Structure : TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00b      	beq.n	8001c74 <TIM_Base_SetConfig+0x34>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c62:	d007      	beq.n	8001c74 <TIM_Base_SetConfig+0x34>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <TIM_Base_SetConfig+0xc4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d003      	beq.n	8001c74 <TIM_Base_SetConfig+0x34>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a26      	ldr	r2, [pc, #152]	; (8001d08 <TIM_Base_SetConfig+0xc8>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d108      	bne.n	8001c86 <TIM_Base_SetConfig+0x46>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00b      	beq.n	8001ca6 <TIM_Base_SetConfig+0x66>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c94:	d007      	beq.n	8001ca6 <TIM_Base_SetConfig+0x66>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <TIM_Base_SetConfig+0xc4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <TIM_Base_SetConfig+0x66>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a19      	ldr	r2, [pc, #100]	; (8001d08 <TIM_Base_SetConfig+0xc8>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d108      	bne.n	8001cb8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cbe:	60fb      	str	r3, [r7, #12]
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d103      	bne.n	8001cf0 <TIM_Base_SetConfig+0xb0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	40012c00 	.word	0x40012c00
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800

08001d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	f023 0201 	bic.w	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	f023 030a 	bic.w	r3, r3, #10
 8001d50:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	621a      	str	r2, [r3, #32]
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr

08001d70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter : Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f023 0210 	bic.w	r2, r3, #16
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001da2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	031b      	lsls	r3, r3, #12
 8001da8:	697a      	ldr	r2, [r7, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001db4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	621a      	str	r2, [r3, #32]
}
 8001dcc:	bf00      	nop
 8001dce:	371c      	adds	r7, #28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr

08001dd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001df2:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001df4:	887b      	ldrh	r3, [r7, #2]
 8001df6:	f043 0307 	orr.w	r3, r3, #7
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	609a      	str	r2, [r3, #8]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	021a      	lsls	r2, r3, #8
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	431a      	orrs	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	371c      	adds	r7, #28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr

08001e56 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d101      	bne.n	8001e6e <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	e032      	b.n	8001ed4 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e8c:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6859      	ldr	r1, [r3, #4]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eae:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr

08001ede <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr

08001f02 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e03f      	b.n	8001f94 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d106      	bne.n	8001f2e <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fe05 	bl	8002b38 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2224      	movs	r2, #36	; 0x24
 8001f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f44:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f9b2 	bl	80022b0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f5a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f6a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f7a:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af02      	add	r7, sp, #8
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	f040 8083 	bne.w	80020c4 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL) || (Size == 0U))
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <HAL_UART_Transmit+0x2e>
 8001fc4:	88fb      	ldrh	r3, [r7, #6]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e07b      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_UART_Transmit+0x40>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e074      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2221      	movs	r2, #33	; 0x21
 8001fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ff2:	f7fe fa8f 	bl	8000514 <HAL_GetTick>
 8001ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	88fa      	ldrh	r2, [r7, #6]
 8001ffc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	88fa      	ldrh	r2, [r7, #6]
 8002002:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002004:	e042      	b.n	800208c <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800200a:	b29b      	uxth	r3, r3
 800200c:	3b01      	subs	r3, #1
 800200e:	b29a      	uxth	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201c:	d122      	bne.n	8002064 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2200      	movs	r2, #0
 8002026:	2180      	movs	r1, #128	; 0x80
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 f8f6 	bl	800221a <UART_WaitOnFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e046      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800204a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d103      	bne.n	800205c <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3302      	adds	r3, #2
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	e017      	b.n	800208c <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	3301      	adds	r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	e013      	b.n	800208c <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2200      	movs	r2, #0
 800206c:	2180      	movs	r1, #128	; 0x80
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f8d3 	bl	800221a <UART_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e023      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	60ba      	str	r2, [r7, #8]
 8002084:	781a      	ldrb	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002090:	b29b      	uxth	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1b7      	bne.n	8002006 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2200      	movs	r2, #0
 800209e:	2140      	movs	r1, #64	; 0x40
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f8ba 	bl	800221a <UART_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e00a      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020c0:	2300      	movs	r3, #0
 80020c2:	e000      	b.n	80020c6 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020c4:	2302      	movs	r3, #2
  }
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b088      	sub	sp, #32
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	603b      	str	r3, [r7, #0]
 80020da:	4613      	mov	r3, r2
 80020dc:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 8090 	bne.w	8002210 <HAL_UART_Receive+0x142>
  {
    if((pData == NULL) || (Size == 0U))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_UART_Receive+0x2e>
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e088      	b.n	8002212 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_UART_Receive+0x40>
 800210a:	2302      	movs	r3, #2
 800210c:	e081      	b.n	8002212 <HAL_UART_Receive+0x144>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2200      	movs	r2, #0
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2222      	movs	r2, #34	; 0x22
 8002120:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002124:	f7fe f9f6 	bl	8000514 <HAL_GetTick>
 8002128:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	88fa      	ldrh	r2, [r7, #6]
 8002134:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 8002136:	e05c      	b.n	80021f2 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800214e:	d12b      	bne.n	80021a8 <HAL_UART_Receive+0xda>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	2200      	movs	r2, #0
 8002158:	2120      	movs	r1, #32
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f85d 	bl	800221a <UART_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e053      	b.n	8002212 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t*)pData;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	613b      	str	r3, [r7, #16]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d10c      	bne.n	8002190 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	b29b      	uxth	r3, r3
 800217e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002182:	b29a      	uxth	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3302      	adds	r3, #2
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	e030      	b.n	80021f2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	b29b      	uxth	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	b29a      	uxth	r2, r3
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	e024      	b.n	80021f2 <HAL_UART_Receive+0x124>
        }

      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	2200      	movs	r2, #0
 80021b0:	2120      	movs	r1, #32
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f831 	bl	800221a <UART_WaitOnFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e027      	b.n	8002212 <HAL_UART_Receive+0x144>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d108      	bne.n	80021dc <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6859      	ldr	r1, [r3, #4]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	60ba      	str	r2, [r7, #8]
 80021d6:	b2ca      	uxtb	r2, r1
 80021d8:	701a      	strb	r2, [r3, #0]
 80021da:	e00a      	b.n	80021f2 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d19d      	bne.n	8002138 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800220c:	2300      	movs	r3, #0
 800220e:	e000      	b.n	8002212 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
  }
}
 8002212:	4618      	mov	r0, r3
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	60f8      	str	r0, [r7, #12]
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4613      	mov	r3, r2
 8002228:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800222a:	e02c      	b.n	8002286 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d028      	beq.n	8002286 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d007      	beq.n	800224a <UART_WaitOnFlagUntilTimeout+0x30>
 800223a:	f7fe f96b 	bl	8000514 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	429a      	cmp	r2, r3
 8002248:	d21d      	bcs.n	8002286 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002258:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695a      	ldr	r2, [r3, #20]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0201 	bic.w	r2, r2, #1
 8002268:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2220      	movs	r2, #32
 800226e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2220      	movs	r2, #32
 8002276:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e00f      	b.n	80022a6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	4013      	ands	r3, r2
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	bf0c      	ite	eq
 8002296:	2301      	moveq	r3, #1
 8002298:	2300      	movne	r3, #0
 800229a:	b2db      	uxtb	r3, r3
 800229c:	461a      	mov	r2, r3
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d0c3      	beq.n	800222c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	431a      	orrs	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022f2:	f023 030c 	bic.w	r3, r3, #12
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699a      	ldr	r2, [r3, #24]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6f      	ldr	r2, [pc, #444]	; (80024d8 <UART_SetConfig+0x228>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d16b      	bne.n	80023f8 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002320:	f7ff f9dc 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8002324:	4602      	mov	r2, r0
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	009a      	lsls	r2, r3, #2
 800232e:	441a      	add	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4a68      	ldr	r2, [pc, #416]	; (80024dc <UART_SetConfig+0x22c>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	011c      	lsls	r4, r3, #4
 8002344:	f7ff f9ca 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8002348:	4602      	mov	r2, r0
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009a      	lsls	r2, r3, #2
 8002352:	441a      	add	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fbb2 f5f3 	udiv	r5, r2, r3
 800235e:	f7ff f9bd 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 8002362:	4602      	mov	r2, r0
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	009a      	lsls	r2, r3, #2
 800236c:	441a      	add	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fbb2 f3f3 	udiv	r3, r2, r3
 8002378:	4a58      	ldr	r2, [pc, #352]	; (80024dc <UART_SetConfig+0x22c>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	095b      	lsrs	r3, r3, #5
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	fb02 f303 	mul.w	r3, r2, r3
 8002386:	1aeb      	subs	r3, r5, r3
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	3332      	adds	r3, #50	; 0x32
 800238c:	4a53      	ldr	r2, [pc, #332]	; (80024dc <UART_SetConfig+0x22c>)
 800238e:	fba2 2303 	umull	r2, r3, r2, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002398:	441c      	add	r4, r3
 800239a:	f7ff f99f 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 800239e:	4602      	mov	r2, r0
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	009a      	lsls	r2, r3, #2
 80023a8:	441a      	add	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80023b4:	f7ff f992 	bl	80016dc <HAL_RCC_GetPCLK2Freq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4613      	mov	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	009a      	lsls	r2, r3, #2
 80023c2:	441a      	add	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4a43      	ldr	r2, [pc, #268]	; (80024dc <UART_SetConfig+0x22c>)
 80023d0:	fba2 2303 	umull	r2, r3, r2, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	2264      	movs	r2, #100	; 0x64
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	1aeb      	subs	r3, r5, r3
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	3332      	adds	r3, #50	; 0x32
 80023e2:	4a3e      	ldr	r2, [pc, #248]	; (80024dc <UART_SetConfig+0x22c>)
 80023e4:	fba2 2303 	umull	r2, r3, r2, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	f003 020f 	and.w	r2, r3, #15
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4422      	add	r2, r4
 80023f4:	609a      	str	r2, [r3, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80023f6:	e06a      	b.n	80024ce <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023f8:	f7ff f95c 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 80023fc:	4602      	mov	r2, r0
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	009a      	lsls	r2, r3, #2
 8002406:	441a      	add	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4a32      	ldr	r2, [pc, #200]	; (80024dc <UART_SetConfig+0x22c>)
 8002414:	fba2 2303 	umull	r2, r3, r2, r3
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	011c      	lsls	r4, r3, #4
 800241c:	f7ff f94a 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 8002420:	4602      	mov	r2, r0
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	009a      	lsls	r2, r3, #2
 800242a:	441a      	add	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	fbb2 f5f3 	udiv	r5, r2, r3
 8002436:	f7ff f93d 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 800243a:	4602      	mov	r2, r0
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	009a      	lsls	r2, r3, #2
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002450:	4a22      	ldr	r2, [pc, #136]	; (80024dc <UART_SetConfig+0x22c>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	2264      	movs	r2, #100	; 0x64
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	1aeb      	subs	r3, r5, r3
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	3332      	adds	r3, #50	; 0x32
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <UART_SetConfig+0x22c>)
 8002466:	fba2 2303 	umull	r2, r3, r2, r3
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	441c      	add	r4, r3
 8002472:	f7ff f91f 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 8002476:	4602      	mov	r2, r0
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fbb2 f5f3 	udiv	r5, r2, r3
 800248c:	f7ff f912 	bl	80016b4 <HAL_RCC_GetPCLK1Freq>
 8002490:	4602      	mov	r2, r0
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009a      	lsls	r2, r3, #2
 800249a:	441a      	add	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <UART_SetConfig+0x22c>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	2264      	movs	r2, #100	; 0x64
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	1aeb      	subs	r3, r5, r3
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	3332      	adds	r3, #50	; 0x32
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <UART_SetConfig+0x22c>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	f003 020f 	and.w	r2, r3, #15
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4422      	add	r2, r4
 80024cc:	609a      	str	r2, [r3, #8]
}
 80024ce:	bf00      	nop
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdb0      	pop	{r4, r5, r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40013800 	.word	0x40013800
 80024dc:	51eb851f 	.word	0x51eb851f

080024e0 <LASetSamplingFreq>:
static void DMATransferComplete(DMA_HandleTypeDef * hdma);

//Global Function Definition

void LASetSamplingFreq(uint32_t divider)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b08f      	sub	sp, #60	; 0x3c
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	  for(int i = 0; i < 200; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	637b      	str	r3, [r7, #52]	; 0x34
 80024ec:	e009      	b.n	8002502 <LASetSamplingFreq+0x22>
	  {
		  capturedData[i] = (uint8_t)i;
 80024ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f0:	b2d9      	uxtb	r1, r3
 80024f2:	4a37      	ldr	r2, [pc, #220]	; (80025d0 <LASetSamplingFreq+0xf0>)
 80024f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f6:	4413      	add	r3, r2
 80024f8:	460a      	mov	r2, r1
 80024fa:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 200; i++)
 80024fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fe:	3301      	adds	r3, #1
 8002500:	637b      	str	r3, [r7, #52]	; 0x34
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	2bc7      	cmp	r3, #199	; 0xc7
 8002506:	ddf2      	ble.n	80024ee <LASetSamplingFreq+0xe>
	  }
	// Stop Timer
	HAL_TIM_Base_Stop_IT(&htim1);
 8002508:	4832      	ldr	r0, [pc, #200]	; (80025d4 <LASetSamplingFreq+0xf4>)
 800250a:	f7ff f95e 	bl	80017ca <HAL_TIM_Base_Stop_IT>

	//Choose Prescalar and Period
	uint64_t requiredFrequency = SUMPBASEFREQ / (divider + 1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3301      	adds	r3, #1
 8002512:	4a31      	ldr	r2, [pc, #196]	; (80025d8 <LASetSamplingFreq+0xf8>)
 8002514:	fbb2 f3f3 	udiv	r3, r2, r3
 8002518:	f04f 0400 	mov.w	r4, #0
 800251c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	uint64_t period = 0u;
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	f04f 0400 	mov.w	r4, #0
 8002528:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	uint64_t prescalar = 0u;
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	f04f 0400 	mov.w	r4, #0
 8002534:	e9c7 3408 	strd	r3, r4, [r7, #32]
	uint64_t requiredPeriodScalarProduct = (TIMERBASEFREQ / requiredFrequency);
 8002538:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800253c:	a122      	add	r1, pc, #136	; (adr r1, 80025c8 <LASetSamplingFreq+0xe8>)
 800253e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002542:	f7fd fe0d 	bl	8000160 <__aeabi_uldivmod>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	e9c7 3402 	strd	r3, r4, [r7, #8]

	for(uint32_t loopIndex = 1; loopIndex < 0xFFFFu; loopIndex++)
 800254e:	2301      	movs	r3, #1
 8002550:	61fb      	str	r3, [r7, #28]
 8002552:	e01b      	b.n	800258c <LASetSamplingFreq+0xac>
	{
		prescalar = loopIndex;
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	f04f 0400 	mov.w	r4, #0
 800255a:	e9c7 3408 	strd	r3, r4, [r7, #32]
		period = requiredPeriodScalarProduct / prescalar;
 800255e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002566:	f7fd fdfb 	bl	8000160 <__aeabi_uldivmod>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

		if(period < 0xFFFFu)
 8002572:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002576:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	42a2      	cmp	r2, r4
 8002580:	bf08      	it	eq
 8002582:	4299      	cmpeq	r1, r3
 8002584:	d208      	bcs.n	8002598 <LASetSamplingFreq+0xb8>
	for(uint32_t loopIndex = 1; loopIndex < 0xFFFFu; loopIndex++)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3301      	adds	r3, #1
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002592:	4293      	cmp	r3, r2
 8002594:	d9de      	bls.n	8002554 <LASetSamplingFreq+0x74>
 8002596:	e000      	b.n	800259a <LASetSamplingFreq+0xba>
		{
			break;
 8002598:	bf00      	nop
		}
	}

	  //htim1.Instance = TIM1;
	  htim1.Init.Prescaler = (uint32_t)(prescalar - 1);
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	3b01      	subs	r3, #1
 800259e:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <LASetSamplingFreq+0xf4>)
 80025a0:	6053      	str	r3, [r2, #4]
	  //htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim1.Init.Period =    (uint32_t)(period - 1);
 80025a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <LASetSamplingFreq+0xf4>)
 80025a8:	60d3      	str	r3, [r2, #12]
	  //htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  //htim1.Init.RepetitionCounter = 0;
	  //htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
	  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025aa:	480a      	ldr	r0, [pc, #40]	; (80025d4 <LASetSamplingFreq+0xf4>)
 80025ac:	f7ff f8c8 	bl	8001740 <HAL_TIM_Base_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <LASetSamplingFreq+0xda>
	  {
	    Error_Handler();
 80025b6:	f000 fa35 	bl	8002a24 <Error_Handler>
	  }


}
 80025ba:	bf00      	nop
 80025bc:	373c      	adds	r7, #60	; 0x3c
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd90      	pop	{r4, r7, pc}
 80025c2:	bf00      	nop
 80025c4:	f3af 8000 	nop.w
 80025c8:	044aa200 	.word	0x044aa200
 80025cc:	00000000 	.word	0x00000000
 80025d0:	20000030 	.word	0x20000030
 80025d4:	20003038 	.word	0x20003038
 80025d8:	05f5e100 	.word	0x05f5e100

080025dc <LABeginSampling>:

void LABeginSampling  (uint32_t numberOfSamples)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	  isTransferComplete = FALSE;
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <LABeginSampling+0x58>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
	  if(numberOfSamples < SAMPLESIZE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f642 72fe 	movw	r2, #12286	; 0x2ffe
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d81b      	bhi.n	800262c <LABeginSampling+0x50>
	  {
		  HAL_DMA_RegisterCallback(&hdma_tim1_up, HAL_DMA_XFER_CPLT_CB_ID, DMATransferComplete);
 80025f4:	4a10      	ldr	r2, [pc, #64]	; (8002638 <LABeginSampling+0x5c>)
 80025f6:	2100      	movs	r1, #0
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <LABeginSampling+0x60>)
 80025fa:	f7fe fa5f 	bl	8000abc <HAL_DMA_RegisterCallback>
		  HAL_StatusTypeDef status = HAL_DMA_Start_IT(&hdma_tim1_up, (uint32_t)&(GPIOC->IDR), (uint32_t)capturedData, numberOfSamples);
 80025fe:	4a10      	ldr	r2, [pc, #64]	; (8002640 <LABeginSampling+0x64>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4910      	ldr	r1, [pc, #64]	; (8002644 <LABeginSampling+0x68>)
 8002604:	480d      	ldr	r0, [pc, #52]	; (800263c <LABeginSampling+0x60>)
 8002606:	f7fe f8f3 	bl	80007f0 <HAL_DMA_Start_IT>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
		  if(status != HAL_OK)
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d000      	beq.n	8002616 <LABeginSampling+0x3a>
		  {
			  while(1);
 8002614:	e7fe      	b.n	8002614 <LABeginSampling+0x38>
		  }
		  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE);
 8002616:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <LABeginSampling+0x6c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <LABeginSampling+0x6c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002624:	60da      	str	r2, [r3, #12]
		  HAL_TIM_Base_Start_IT(&htim1);
 8002626:	4808      	ldr	r0, [pc, #32]	; (8002648 <LABeginSampling+0x6c>)
 8002628:	f7ff f8b5 	bl	8001796 <HAL_TIM_Base_Start_IT>
	  }

	}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000028 	.word	0x20000028
 8002638:	08002661 	.word	0x08002661
 800263c:	20003078 	.word	0x20003078
 8002640:	20000030 	.word	0x20000030
 8002644:	40011008 	.word	0x40011008
 8002648:	20003038 	.word	0x20003038

0800264c <LAIsSamplingComplete>:

uint8_t LAIsSamplingComplete()
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
	return isTransferComplete;
 8002650:	4b02      	ldr	r3, [pc, #8]	; (800265c <LAIsSamplingComplete+0x10>)
 8002652:	781b      	ldrb	r3, [r3, #0]
}
 8002654:	4618      	mov	r0, r3
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000028 	.word	0x20000028

08002660 <DMATransferComplete>:

//Local functions definition
static void DMATransferComplete(DMA_HandleTypeDef * hdma)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
	isTransferComplete = TRUE;
 8002668:	4b04      	ldr	r3, [pc, #16]	; (800267c <DMATransferComplete+0x1c>)
 800266a:	2201      	movs	r2, #1
 800266c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim1);
 800266e:	4804      	ldr	r0, [pc, #16]	; (8002680 <DMATransferComplete+0x20>)
 8002670:	f7ff f8ab 	bl	80017ca <HAL_TIM_Base_Stop_IT>

	}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000028 	.word	0x20000028
 8002680:	20003038 	.word	0x20003038

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800268a:	f7fd feeb 	bl	8000464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268e:	f000 f871 	bl	8002774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002692:	f000 f94d 	bl	8002930 <MX_GPIO_Init>
  MX_DMA_Init();
 8002696:	f000 f92d 	bl	80028f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800269a:	f000 f901 	bl	80028a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800269e:	f000 f8af 	bl	8002800 <MX_TIM1_Init>
  */

  while (1)
  {
	  // Get first byte of SUMP command from SUMP client
	  halResult = HAL_UART_Receive(&huart2, receivedData, 1u, 200u);
 80026a2:	23c8      	movs	r3, #200	; 0xc8
 80026a4:	2201      	movs	r2, #1
 80026a6:	492d      	ldr	r1, [pc, #180]	; (800275c <main+0xd8>)
 80026a8:	482d      	ldr	r0, [pc, #180]	; (8002760 <main+0xdc>)
 80026aa:	f7ff fd10 	bl	80020ce <HAL_UART_Receive>
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]

	  if(halResult == HAL_OK)
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d124      	bne.n	8002702 <main+0x7e>
	  {
		if(SumpIsLongCommand(receivedData[0]) == TRUE)
 80026b8:	4b28      	ldr	r3, [pc, #160]	; (800275c <main+0xd8>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 fbdf 	bl	8002e80 <SumpIsLongCommand>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <main+0x54>
		{
			halResult = HAL_UART_Receive(&huart2, &receivedData[1], 4u, 100u);
 80026c8:	2364      	movs	r3, #100	; 0x64
 80026ca:	2204      	movs	r2, #4
 80026cc:	4925      	ldr	r1, [pc, #148]	; (8002764 <main+0xe0>)
 80026ce:	4824      	ldr	r0, [pc, #144]	; (8002760 <main+0xdc>)
 80026d0:	f7ff fcfd 	bl	80020ce <HAL_UART_Receive>
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
		}

		if(halResult == HAL_OK)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d111      	bne.n	8002702 <main+0x7e>
		{
			responseRequired = SumpAnalyze(receivedData);
 80026de:	481f      	ldr	r0, [pc, #124]	; (800275c <main+0xd8>)
 80026e0:	f000 fab4 	bl	8002c4c <SumpAnalyze>
 80026e4:	4603      	mov	r3, r0
 80026e6:	71bb      	strb	r3, [r7, #6]
			if ( responseRequired == TRUE )
 80026e8:	79bb      	ldrb	r3, [r7, #6]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d109      	bne.n	8002702 <main+0x7e>
			{
				HAL_UART_Transmit(&huart2, sumpResponse.response, sumpResponse.length, 500);
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <main+0xe4>)
 80026f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80026fa:	491b      	ldr	r1, [pc, #108]	; (8002768 <main+0xe4>)
 80026fc:	4818      	ldr	r0, [pc, #96]	; (8002760 <main+0xdc>)
 80026fe:	f7ff fc4d 	bl	8001f9c <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Check if controller is armed, if so, send data and unarm
	  if(sumpData.isArmed == TRUE)
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <main+0xe8>)
 8002704:	791b      	ldrb	r3, [r3, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d1cb      	bne.n	80026a2 <main+0x1e>
	  {
		  LASetSamplingFreq(sumpData.divider);
 800270a:	4b18      	ldr	r3, [pc, #96]	; (800276c <main+0xe8>)
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	4618      	mov	r0, r3
 8002710:	f7ff fee6 	bl	80024e0 <LASetSamplingFreq>
		  LABeginSampling((sumpData.readCount * 4u) + 4u);
 8002714:	4b15      	ldr	r3, [pc, #84]	; (800276c <main+0xe8>)
 8002716:	8b9b      	ldrh	r3, [r3, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <LABeginSampling>
		  while(LAIsSamplingComplete() != TRUE)
 8002722:	bf00      	nop
 8002724:	f7ff ff92 	bl	800264c <LAIsSamplingComplete>
 8002728:	4603      	mov	r3, r0
 800272a:	2b01      	cmp	r3, #1
 800272c:	d1fa      	bne.n	8002724 <main+0xa0>
		  {

		  }
		  HAL_UART_Transmit(&huart2, capturedData, (sumpData.readCount * 4u) + 4u, 1000u);
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <main+0xe8>)
 8002730:	8b9b      	ldrh	r3, [r3, #28]
 8002732:	3301      	adds	r3, #1
 8002734:	b29b      	uxth	r3, r3
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	b29a      	uxth	r2, r3
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	490c      	ldr	r1, [pc, #48]	; (8002770 <main+0xec>)
 8002740:	4807      	ldr	r0, [pc, #28]	; (8002760 <main+0xdc>)
 8002742:	f7ff fc2b 	bl	8001f9c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, capturedData, 30, 100);
 8002746:	2364      	movs	r3, #100	; 0x64
 8002748:	221e      	movs	r2, #30
 800274a:	4909      	ldr	r1, [pc, #36]	; (8002770 <main+0xec>)
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <main+0xdc>)
 800274e:	f7ff fc25 	bl	8001f9c <HAL_UART_Transmit>
		  sumpData.isArmed = FALSE;
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <main+0xe8>)
 8002754:	2200      	movs	r2, #0
 8002756:	711a      	strb	r2, [r3, #4]
	  halResult = HAL_UART_Receive(&huart2, receivedData, 1u, 200u);
 8002758:	e7a3      	b.n	80026a2 <main+0x1e>
 800275a:	bf00      	nop
 800275c:	20003030 	.word	0x20003030
 8002760:	200030bc 	.word	0x200030bc
 8002764:	20003031 	.word	0x20003031
 8002768:	20003120 	.word	0x20003120
 800276c:	200030fc 	.word	0x200030fc
 8002770:	20000030 	.word	0x20000030

08002774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b090      	sub	sp, #64	; 0x40
 8002778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800277a:	f107 0318 	add.w	r3, r7, #24
 800277e:	2228      	movs	r2, #40	; 0x28
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fc2d 	bl	8002fe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	605a      	str	r2, [r3, #4]
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002796:	2301      	movs	r3, #1
 8002798:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800279a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800279e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027a0:	2300      	movs	r3, #0
 80027a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027a4:	2301      	movs	r3, #1
 80027a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a8:	2302      	movs	r3, #2
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027b2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fb9d 	bl	8000efc <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80027c8:	f000 f92c 	bl	8002a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	2102      	movs	r1, #2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fe fdec 	bl	80013c4 <HAL_RCC_ClockConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80027f2:	f000 f917 	bl	8002a24 <Error_Handler>
  }
}
 80027f6:	bf00      	nop
 80027f8:	3740      	adds	r7, #64	; 0x40
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002806:	f107 0308 	add.w	r3, r7, #8
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002814:	463b      	mov	r3, r7
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800281c:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <MX_TIM1_Init+0x98>)
 800281e:	4a1f      	ldr	r2, [pc, #124]	; (800289c <MX_TIM1_Init+0x9c>)
 8002820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <MX_TIM1_Init+0x98>)
 8002824:	2264      	movs	r2, #100	; 0x64
 8002826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002828:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <MX_TIM1_Init+0x98>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 800282e:	4b1a      	ldr	r3, [pc, #104]	; (8002898 <MX_TIM1_Init+0x98>)
 8002830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <MX_TIM1_Init+0x98>)
 8002838:	2200      	movs	r2, #0
 800283a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800283c:	4b16      	ldr	r3, [pc, #88]	; (8002898 <MX_TIM1_Init+0x98>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002842:	4b15      	ldr	r3, [pc, #84]	; (8002898 <MX_TIM1_Init+0x98>)
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002848:	4813      	ldr	r0, [pc, #76]	; (8002898 <MX_TIM1_Init+0x98>)
 800284a:	f7fe ff79 	bl	8001740 <HAL_TIM_Base_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002854:	f000 f8e6 	bl	8002a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	4619      	mov	r1, r3
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <MX_TIM1_Init+0x98>)
 8002866:	f7ff f8e2 	bl	8001a2e <HAL_TIM_ConfigClockSource>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002870:	f000 f8d8 	bl	8002a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002874:	2320      	movs	r3, #32
 8002876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800287c:	463b      	mov	r3, r7
 800287e:	4619      	mov	r1, r3
 8002880:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_TIM1_Init+0x98>)
 8002882:	f7ff fae8 	bl	8001e56 <HAL_TIMEx_MasterConfigSynchronization>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800288c:	f000 f8ca 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20003038 	.word	0x20003038
 800289c:	40012c00 	.word	0x40012c00

080028a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028a6:	4a12      	ldr	r2, [pc, #72]	; (80028f0 <MX_USART2_UART_Init+0x50>)
 80028a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028b2:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028be:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028c6:	220c      	movs	r2, #12
 80028c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_USART2_UART_Init+0x4c>)
 80028d8:	f7ff fb13 	bl	8001f02 <HAL_UART_Init>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028e2:	f000 f89f 	bl	8002a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028e6:	bf00      	nop
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200030bc 	.word	0x200030bc
 80028f0:	40004400 	.word	0x40004400

080028f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80028fa:	4b0c      	ldr	r3, [pc, #48]	; (800292c <MX_DMA_Init+0x38>)
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	4a0b      	ldr	r2, [pc, #44]	; (800292c <MX_DMA_Init+0x38>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6153      	str	r3, [r2, #20]
 8002906:	4b09      	ldr	r3, [pc, #36]	; (800292c <MX_DMA_Init+0x38>)
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	607b      	str	r3, [r7, #4]
 8002910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002912:	2200      	movs	r2, #0
 8002914:	2100      	movs	r1, #0
 8002916:	200f      	movs	r0, #15
 8002918:	f7fd fed9 	bl	80006ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800291c:	200f      	movs	r0, #15
 800291e:	f7fd fef2 	bl	8000706 <HAL_NVIC_EnableIRQ>

}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40021000 	.word	0x40021000

08002930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b088      	sub	sp, #32
 8002934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002936:	f107 0310 	add.w	r3, r7, #16
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]
 8002940:	609a      	str	r2, [r3, #8]
 8002942:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	4a32      	ldr	r2, [pc, #200]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800294a:	f043 0310 	orr.w	r3, r3, #16
 800294e:	6193      	str	r3, [r2, #24]
 8002950:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800295c:	4b2d      	ldr	r3, [pc, #180]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	4a2c      	ldr	r2, [pc, #176]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002962:	f043 0320 	orr.w	r3, r3, #32
 8002966:	6193      	str	r3, [r2, #24]
 8002968:	4b2a      	ldr	r3, [pc, #168]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	60bb      	str	r3, [r7, #8]
 8002972:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4a26      	ldr	r2, [pc, #152]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800297a:	f043 0304 	orr.w	r3, r3, #4
 800297e:	6193      	str	r3, [r2, #24]
 8002980:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002982:	699b      	ldr	r3, [r3, #24]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	607b      	str	r3, [r7, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800298c:	4b21      	ldr	r3, [pc, #132]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	4a20      	ldr	r2, [pc, #128]	; (8002a14 <MX_GPIO_Init+0xe4>)
 8002992:	f043 0308 	orr.w	r3, r3, #8
 8002996:	6193      	str	r3, [r2, #24]
 8002998:	4b1e      	ldr	r3, [pc, #120]	; (8002a14 <MX_GPIO_Init+0xe4>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	603b      	str	r3, [r7, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029a4:	2200      	movs	r2, #0
 80029a6:	2120      	movs	r1, #32
 80029a8:	481b      	ldr	r0, [pc, #108]	; (8002a18 <MX_GPIO_Init+0xe8>)
 80029aa:	f7fe fa5b 	bl	8000e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80029ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <MX_GPIO_Init+0xec>)
 80029b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80029bc:	f107 0310 	add.w	r3, r7, #16
 80029c0:	4619      	mov	r1, r3
 80029c2:	4817      	ldr	r0, [pc, #92]	; (8002a20 <MX_GPIO_Init+0xf0>)
 80029c4:	f7fe f8f0 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80029c8:	23ff      	movs	r3, #255	; 0xff
 80029ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4619      	mov	r1, r3
 80029da:	4811      	ldr	r0, [pc, #68]	; (8002a20 <MX_GPIO_Init+0xf0>)
 80029dc:	f7fe f8e4 	bl	8000ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80029e0:	2320      	movs	r3, #32
 80029e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2302      	movs	r3, #2
 80029ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	4619      	mov	r1, r3
 80029f6:	4808      	ldr	r0, [pc, #32]	; (8002a18 <MX_GPIO_Init+0xe8>)
 80029f8:	f7fe f8d6 	bl	8000ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2100      	movs	r1, #0
 8002a00:	2028      	movs	r0, #40	; 0x28
 8002a02:	f7fd fe64 	bl	80006ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a06:	2028      	movs	r0, #40	; 0x28
 8002a08:	f7fd fe7d 	bl	8000706 <HAL_NVIC_EnableIRQ>

}
 8002a0c:	bf00      	nop
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010800 	.word	0x40010800
 8002a1c:	10110000 	.word	0x10110000
 8002a20:	40011000 	.word	0x40011000

08002a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	4a14      	ldr	r2, [pc, #80]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6193      	str	r3, [r2, #24]
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a58:	61d3      	str	r3, [r2, #28]
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <HAL_MspInit+0x5c>)
 8002a5c:	69db      	ldr	r3, [r3, #28]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a62:	607b      	str	r3, [r7, #4]
 8002a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a66:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <HAL_MspInit+0x60>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	4a04      	ldr	r2, [pc, #16]	; (8002a90 <HAL_MspInit+0x60>)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	40010000 	.word	0x40010000

08002a94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a21      	ldr	r2, [pc, #132]	; (8002b28 <HAL_TIM_Base_MspInit+0x94>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d13b      	bne.n	8002b1e <HAL_TIM_Base_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aa6:	4b21      	ldr	r3, [pc, #132]	; (8002b2c <HAL_TIM_Base_MspInit+0x98>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <HAL_TIM_Base_MspInit+0x98>)
 8002aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab0:	6193      	str	r3, [r2, #24]
 8002ab2:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_TIM_Base_MspInit+0x98>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aba:	60fb      	str	r3, [r7, #12]
 8002abc:	68fb      	ldr	r3, [r7, #12]
  
    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Channel5;
 8002abe:	4b1c      	ldr	r3, [pc, #112]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ac0:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <HAL_TIM_Base_MspInit+0xa0>)
 8002ac2:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac4:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aca:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 8002ad0:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ad2:	2280      	movs	r2, #128	; 0x80
 8002ad4:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002adc:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.Mode = DMA_NORMAL;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002aec:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002af0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002af2:	480f      	ldr	r0, [pc, #60]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002af4:	f7fd fe22 	bl	800073c <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8002afe:	f7ff ff91 	bl	8002a24 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002b06:	621a      	str	r2, [r3, #32]
 8002b08:	4a09      	ldr	r2, [pc, #36]	; (8002b30 <HAL_TIM_Base_MspInit+0x9c>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2019      	movs	r0, #25
 8002b14:	f7fd fddb 	bl	80006ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002b18:	2019      	movs	r0, #25
 8002b1a:	f7fd fdf4 	bl	8000706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b1e:	bf00      	nop
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	20003078 	.word	0x20003078
 8002b34:	40020058 	.word	0x40020058

08002b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_UART_MspInit+0x70>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d123      	bne.n	8002ba0 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b62:	61d3      	str	r3, [r2, #28]
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b66:	69db      	ldr	r3, [r3, #28]
 8002b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b76:	f043 0304 	orr.w	r3, r3, #4
 8002b7a:	6193      	str	r3, [r2, #24]
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_UART_MspInit+0x74>)
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b88:	230c      	movs	r3, #12
 8002b8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <HAL_UART_MspInit+0x78>)
 8002b9c:	f7fe f804 	bl	8000ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ba0:	bf00      	nop
 8002ba2:	3720      	adds	r7, #32
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40004400 	.word	0x40004400
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40010800 	.word	0x40010800

08002bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bc4:	e7fe      	b.n	8002bc4 <HardFault_Handler+0x4>

08002bc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bca:	e7fe      	b.n	8002bca <MemManage_Handler+0x4>

08002bcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <BusFault_Handler+0x4>

08002bd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <UsageFault_Handler+0x4>

08002bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bdc:	bf00      	nop
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf4:	bf00      	nop
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr

08002bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c00:	f7fd fc76 	bl	80004f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002c0c:	4802      	ldr	r0, [pc, #8]	; (8002c18 <DMA1_Channel5_IRQHandler+0x10>)
 8002c0e:	f7fd fe4f 	bl	80008b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20003078 	.word	0x20003078

08002c1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002c20:	2120      	movs	r1, #32
 8002c22:	4804      	ldr	r0, [pc, #16]	; (8002c34 <TIM1_UP_IRQHandler+0x18>)
 8002c24:	f7fe f936 	bl	8000e94 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c28:	4803      	ldr	r0, [pc, #12]	; (8002c38 <TIM1_UP_IRQHandler+0x1c>)
 8002c2a:	f7fe fdf8 	bl	800181e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	40010800 	.word	0x40010800
 8002c38:	20003038 	.word	0x20003038

08002c3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002c40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002c44:	f7fe f938 	bl	8000eb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <SumpAnalyze>:
  memset(&sumpData, 0u, sizeof(sumpData));
}

//Analyzes the data provided according to SUMP specificaions.
uint8_t SumpAnalyze(uint8_t* data)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint8_t isResponsePrepared = FALSE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd = data[0];
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	73bb      	strb	r3, [r7, #14]
  if(cmd == SUMP_RESET)
 8002c5e:	7bbb      	ldrb	r3, [r7, #14]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <SumpAnalyze+0x24>
  {
    sumpData.resetCount++;
 8002c64:	4b82      	ldr	r3, [pc, #520]	; (8002e70 <SumpAnalyze+0x224>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a81      	ldr	r2, [pc, #516]	; (8002e70 <SumpAnalyze+0x224>)
 8002c6c:	6013      	str	r3, [r2, #0]
 8002c6e:	e0fa      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if (cmd == SUMP_RUN)
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d103      	bne.n	8002c7e <SumpAnalyze+0x32>
  {
    sumpData.isArmed = TRUE;
 8002c76:	4b7e      	ldr	r3, [pc, #504]	; (8002e70 <SumpAnalyze+0x224>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	711a      	strb	r2, [r3, #4]
 8002c7c:	e0f3      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if (cmd == SUMP_ID)   
 8002c7e:	7bbb      	ldrb	r3, [r7, #14]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d11e      	bne.n	8002cc2 <SumpAnalyze+0x76>
  {
    char resp[] = "1ALS";
 8002c84:	4a7b      	ldr	r2, [pc, #492]	; (8002e74 <SumpAnalyze+0x228>)
 8002c86:	f107 0308 	add.w	r3, r7, #8
 8002c8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c8e:	6018      	str	r0, [r3, #0]
 8002c90:	3304      	adds	r3, #4
 8002c92:	7019      	strb	r1, [r3, #0]
    sumpResponse.length = strlen(resp);
 8002c94:	f107 0308 	add.w	r3, r7, #8
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fa59 	bl	8000150 <strlen>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b75      	ldr	r3, [pc, #468]	; (8002e78 <SumpAnalyze+0x22c>)
 8002ca4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    memcpy(sumpResponse.response, resp, sumpResponse.length);
 8002ca8:	4b73      	ldr	r3, [pc, #460]	; (8002e78 <SumpAnalyze+0x22c>)
 8002caa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f107 0308 	add.w	r3, r7, #8
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4870      	ldr	r0, [pc, #448]	; (8002e78 <SumpAnalyze+0x22c>)
 8002cb8:	f000 f988 	bl	8002fcc <memcpy>
    isResponsePrepared = TRUE;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
 8002cc0:	e0d1      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if (cmd == SUMP_XON)
 8002cc2:	7bbb      	ldrb	r3, [r7, #14]
 8002cc4:	2b11      	cmp	r3, #17
 8002cc6:	d103      	bne.n	8002cd0 <SumpAnalyze+0x84>
  {
    sumpData.isPaused = FALSE;
 8002cc8:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <SumpAnalyze+0x224>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	715a      	strb	r2, [r3, #5]
 8002cce:	e0ca      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if (cmd == SUMP_XOFF)
 8002cd0:	7bbb      	ldrb	r3, [r7, #14]
 8002cd2:	2b13      	cmp	r3, #19
 8002cd4:	d103      	bne.n	8002cde <SumpAnalyze+0x92>
  {
    sumpData.isPaused = TRUE;
 8002cd6:	4b66      	ldr	r3, [pc, #408]	; (8002e70 <SumpAnalyze+0x224>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	715a      	strb	r2, [r3, #5]
 8002cdc:	e0c3      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if ((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_MASK)
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002ce4:	2bc0      	cmp	r3, #192	; 0xc0
 8002ce6:	d115      	bne.n	8002d14 <SumpAnalyze+0xc8>
  {
    sumpData.triggerMask = (data[1]) | ((uint32_t)data[2] << 8) | ((uint32_t)data[3] << 16) | ((uint32_t)data[4] << 24);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3301      	adds	r3, #1
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3302      	adds	r3, #2
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	3303      	adds	r3, #3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	4a58      	ldr	r2, [pc, #352]	; (8002e70 <SumpAnalyze+0x224>)
 8002d10:	6093      	str	r3, [r2, #8]
 8002d12:	e0a8      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_VALUES)
 8002d14:	7bbb      	ldrb	r3, [r7, #14]
 8002d16:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002d1a:	2bc1      	cmp	r3, #193	; 0xc1
 8002d1c:	d115      	bne.n	8002d4a <SumpAnalyze+0xfe>
  {
    sumpData.triggerValues = (data[1]) | ((uint32_t)data[2] << 8) | ((uint32_t)data[3] << 16) | ((uint32_t)data[4] << 24);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3301      	adds	r3, #1
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3302      	adds	r3, #2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3303      	adds	r3, #3
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	4313      	orrs	r3, r2
 8002d44:	4a4a      	ldr	r2, [pc, #296]	; (8002e70 <SumpAnalyze+0x224>)
 8002d46:	60d3      	str	r3, [r2, #12]
 8002d48:	e08d      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_CONFIG)
 8002d4a:	7bbb      	ldrb	r3, [r7, #14]
 8002d4c:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002d50:	2bc2      	cmp	r3, #194	; 0xc2
 8002d52:	d13d      	bne.n	8002dd0 <SumpAnalyze+0x184>
  {
    sumpData.triggerConfig.delay = (data[1]) | ((uint32_t)data[2] << 8);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3301      	adds	r3, #1
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3302      	adds	r3, #2
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	4b40      	ldr	r3, [pc, #256]	; (8002e70 <SumpAnalyze+0x224>)
 8002d6e:	821a      	strh	r2, [r3, #16]
    sumpData.triggerConfig.level = (0x03 & data[3]);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3303      	adds	r3, #3
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <SumpAnalyze+0x224>)
 8002d7e:	74da      	strb	r2, [r3, #19]
    sumpData.triggerConfig.start = (0x08 & data[4]) >> 3;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <SumpAnalyze+0x224>)
 8002d92:	755a      	strb	r2, [r3, #21]
    sumpData.triggerConfig.serial= (0x04 & data[4]) >> 2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3304      	adds	r3, #4
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	4b32      	ldr	r3, [pc, #200]	; (8002e70 <SumpAnalyze+0x224>)
 8002da6:	751a      	strb	r2, [r3, #20]
    sumpData.triggerConfig.channel = ((0x01 & data[4]) << 4) | ((0xF0 & data[3]) >> 4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	b25b      	sxtb	r3, r3
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	b25a      	sxtb	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3303      	adds	r3, #3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4b29      	ldr	r3, [pc, #164]	; (8002e70 <SumpAnalyze+0x224>)
 8002dcc:	749a      	strb	r2, [r3, #18]
 8002dce:	e04a      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if(cmd == SUMP_SET_DIVIDER)
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d110      	bne.n	8002df8 <SumpAnalyze+0x1ac>
  {
    sumpData.divider = (data[1]) | ((uint32_t)data[2] << 8) | ((uint32_t)data[3] << 16);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	3302      	adds	r3, #2
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3303      	adds	r3, #3
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	041b      	lsls	r3, r3, #16
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a1f      	ldr	r2, [pc, #124]	; (8002e70 <SumpAnalyze+0x224>)
 8002df4:	6193      	str	r3, [r2, #24]
 8002df6:	e036      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if(cmd == SUMP_SET_READCOUNT)
 8002df8:	7bbb      	ldrb	r3, [r7, #14]
 8002dfa:	2b81      	cmp	r3, #129	; 0x81
 8002dfc:	d119      	bne.n	8002e32 <SumpAnalyze+0x1e6>
  {
    sumpData.readCount = (data[1]) | ((uint32_t)data[2] << 8);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3301      	adds	r3, #1
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3302      	adds	r3, #2
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <SumpAnalyze+0x224>)
 8002e18:	839a      	strh	r2, [r3, #28]
    sumpData.resetCount = (data[3]) | ((uint32_t)data[4] << 8);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3303      	adds	r3, #3
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3304      	adds	r3, #4
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <SumpAnalyze+0x224>)
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e019      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if(cmd == SUMP_SET_FLAGS)
 8002e32:	7bbb      	ldrb	r3, [r7, #14]
 8002e34:	2b82      	cmp	r3, #130	; 0x82
 8002e36:	d105      	bne.n	8002e44 <SumpAnalyze+0x1f8>
  {
    sumpData.flags = data[1];
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	785a      	ldrb	r2, [r3, #1]
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <SumpAnalyze+0x224>)
 8002e3e:	f883 2020 	strb.w	r2, [r3, #32]
 8002e42:	e010      	b.n	8002e66 <SumpAnalyze+0x21a>
  }
  else if (cmd == 0x04)
 8002e44:	7bbb      	ldrb	r3, [r7, #14]
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d10d      	bne.n	8002e66 <SumpAnalyze+0x21a>
  {
    sumpResponse.length = sizeof(metadata);
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <SumpAnalyze+0x22c>)
 8002e4c:	221e      	movs	r2, #30
 8002e4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    memcpy(sumpResponse.response, metadata ,sumpResponse.length);
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <SumpAnalyze+0x22c>)
 8002e54:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4908      	ldr	r1, [pc, #32]	; (8002e7c <SumpAnalyze+0x230>)
 8002e5c:	4806      	ldr	r0, [pc, #24]	; (8002e78 <SumpAnalyze+0x22c>)
 8002e5e:	f000 f8b5 	bl	8002fcc <memcpy>
    isResponsePrepared = TRUE;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
  }
  else
  {
    //Error - Wrong Sump Command
  }
  return isResponsePrepared;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200030fc 	.word	0x200030fc
 8002e74:	08003020 	.word	0x08003020
 8002e78:	20003120 	.word	0x20003120
 8002e7c:	08003028 	.word	0x08003028

08002e80 <SumpIsLongCommand>:



//Check if command is long command or short command
uint8_t SumpIsLongCommand(uint8_t cmd)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
  uint8_t isLong = FALSE;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  if((cmd == SUMP_SET_FLAGS) || (cmd == SUMP_SET_READCOUNT) || (cmd == SUMP_SET_DIVIDER)\
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b82      	cmp	r3, #130	; 0x82
 8002e92:	d014      	beq.n	8002ebe <SumpIsLongCommand+0x3e>
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	2b81      	cmp	r3, #129	; 0x81
 8002e98:	d011      	beq.n	8002ebe <SumpIsLongCommand+0x3e>
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	2b80      	cmp	r3, #128	; 0x80
 8002e9e:	d00e      	beq.n	8002ebe <SumpIsLongCommand+0x3e>
     || ((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_CONFIG)\
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002ea6:	2bc2      	cmp	r3, #194	; 0xc2
 8002ea8:	d009      	beq.n	8002ebe <SumpIsLongCommand+0x3e>
     || ((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_VALUES)\
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002eb0:	2bc1      	cmp	r3, #193	; 0xc1
 8002eb2:	d004      	beq.n	8002ebe <SumpIsLongCommand+0x3e>
     || ((cmd & SUMP_MASK_SET_TRIGGER) == SUMP_SET_TRIGGER_MASK))
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	f003 03f3 	and.w	r3, r3, #243	; 0xf3
 8002eba:	2bc0      	cmp	r3, #192	; 0xc0
 8002ebc:	d101      	bne.n	8002ec2 <SumpIsLongCommand+0x42>
  {
    isLong = TRUE;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
  }
  
  return isLong;
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
  
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
	...

08002ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002ed4:	4b15      	ldr	r3, [pc, #84]	; (8002f2c <SystemInit+0x5c>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <SystemInit+0x5c>)
 8002eda:	f043 0301 	orr.w	r3, r3, #1
 8002ede:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <SystemInit+0x5c>)
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	4911      	ldr	r1, [pc, #68]	; (8002f2c <SystemInit+0x5c>)
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <SystemInit+0x60>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <SystemInit+0x5c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <SystemInit+0x5c>)
 8002ef2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <SystemInit+0x5c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SystemInit+0x5c>)
 8002f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f06:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <SystemInit+0x5c>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <SystemInit+0x5c>)
 8002f0e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002f12:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SystemInit+0x5c>)
 8002f16:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002f1a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	; (8002f34 <SystemInit+0x64>)
 8002f1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f22:	609a      	str	r2, [r3, #8]
#endif 
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	f8ff0000 	.word	0xf8ff0000
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002f38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002f3a:	e003      	b.n	8002f44 <LoopCopyDataInit>

08002f3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002f3c:	4b0b      	ldr	r3, [pc, #44]	; (8002f6c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002f3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002f40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002f42:	3104      	adds	r1, #4

08002f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002f44:	480a      	ldr	r0, [pc, #40]	; (8002f70 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002f48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002f4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002f4c:	d3f6      	bcc.n	8002f3c <CopyDataInit>
  ldr r2, =_sbss
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002f50:	e002      	b.n	8002f58 <LoopFillZerobss>

08002f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002f52:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002f54:	f842 3b04 	str.w	r3, [r2], #4

08002f58 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002f5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002f5c:	d3f9      	bcc.n	8002f52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002f5e:	f7ff ffb7 	bl	8002ed0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f62:	f000 f80f 	bl	8002f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002f66:	f7ff fb8d 	bl	8002684 <main>
  bx lr
 8002f6a:	4770      	bx	lr
  ldr r3, =_sidata
 8002f6c:	08003070 	.word	0x08003070
  ldr r0, =_sdata
 8002f70:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002f74:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8002f78:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002f7c:	20003154 	.word	0x20003154

08002f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002f80:	e7fe      	b.n	8002f80 <ADC1_2_IRQHandler>
	...

08002f84 <__libc_init_array>:
 8002f84:	b570      	push	{r4, r5, r6, lr}
 8002f86:	2500      	movs	r5, #0
 8002f88:	4e0c      	ldr	r6, [pc, #48]	; (8002fbc <__libc_init_array+0x38>)
 8002f8a:	4c0d      	ldr	r4, [pc, #52]	; (8002fc0 <__libc_init_array+0x3c>)
 8002f8c:	1ba4      	subs	r4, r4, r6
 8002f8e:	10a4      	asrs	r4, r4, #2
 8002f90:	42a5      	cmp	r5, r4
 8002f92:	d109      	bne.n	8002fa8 <__libc_init_array+0x24>
 8002f94:	f000 f82e 	bl	8002ff4 <_init>
 8002f98:	2500      	movs	r5, #0
 8002f9a:	4e0a      	ldr	r6, [pc, #40]	; (8002fc4 <__libc_init_array+0x40>)
 8002f9c:	4c0a      	ldr	r4, [pc, #40]	; (8002fc8 <__libc_init_array+0x44>)
 8002f9e:	1ba4      	subs	r4, r4, r6
 8002fa0:	10a4      	asrs	r4, r4, #2
 8002fa2:	42a5      	cmp	r5, r4
 8002fa4:	d105      	bne.n	8002fb2 <__libc_init_array+0x2e>
 8002fa6:	bd70      	pop	{r4, r5, r6, pc}
 8002fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fac:	4798      	blx	r3
 8002fae:	3501      	adds	r5, #1
 8002fb0:	e7ee      	b.n	8002f90 <__libc_init_array+0xc>
 8002fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002fb6:	4798      	blx	r3
 8002fb8:	3501      	adds	r5, #1
 8002fba:	e7f2      	b.n	8002fa2 <__libc_init_array+0x1e>
 8002fbc:	08003068 	.word	0x08003068
 8002fc0:	08003068 	.word	0x08003068
 8002fc4:	08003068 	.word	0x08003068
 8002fc8:	0800306c 	.word	0x0800306c

08002fcc <memcpy>:
 8002fcc:	b510      	push	{r4, lr}
 8002fce:	1e43      	subs	r3, r0, #1
 8002fd0:	440a      	add	r2, r1
 8002fd2:	4291      	cmp	r1, r2
 8002fd4:	d100      	bne.n	8002fd8 <memcpy+0xc>
 8002fd6:	bd10      	pop	{r4, pc}
 8002fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fe0:	e7f7      	b.n	8002fd2 <memcpy+0x6>

08002fe2 <memset>:
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4402      	add	r2, r0
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d100      	bne.n	8002fec <memset+0xa>
 8002fea:	4770      	bx	lr
 8002fec:	f803 1b01 	strb.w	r1, [r3], #1
 8002ff0:	e7f9      	b.n	8002fe6 <memset+0x4>
	...

08002ff4 <_init>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr

08003000 <_fini>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	bf00      	nop
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr
